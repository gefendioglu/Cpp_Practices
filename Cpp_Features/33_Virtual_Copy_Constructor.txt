
// --------------------------------------------
// --------------------------------------------

- **Example**:  Virtual Copy Constructor 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

// Starting a Library
class Base{
public:
	Base() { }
	
	// Ensures to invoke actual object destructor 
	virtual ~Base() { }

	// Pure virtual function
	virtual void ChangeAttributes() = 0;

	// The "Virtual Constructor" 
	static Base* Create(int id);

	// The "Virtual Copy Constructor" 
	virtual Base* Clone() = 0;
};

class Derived1 : public Base{
public:
	Derived1()	{
		std::cout << "Derived1 created" << "\n";
	}

	Derived1(const Derived1& rhs)	{
		std::cout << "Derived1 created by deep copy" << "\n";
	}

	~Derived1()	{
		std::cout << "~Derived1 destroyed" << "\n";
	}

	void ChangeAttributes()	override {
		std::cout << "Derived1 Attributes Changed" << "\n";
	}

	Base* Clone() override {
		return new Derived1(*this);
	}
};

class Derived2 : public Base{
public:
	Derived2()	{
		std::cout << "Derived2 created" << "\n";
	}

	Derived2(const Derived2& rhs) {
		std::cout << "Derived2 created by deep copy" << "\n";
	}

	~Derived2()	{
		std::cout << "~Derived2 destroyed" << "\n";
	}

	void ChangeAttributes() override	{
		std::cout << "Derived2 Attributes Changed" << "\n";
	}

	Base* Clone() override {
		return new Derived2(*this);
	}
};

class Derived3 : public Base{
public:
	Derived3()	{
		std::cout << "Derived3 created" << "\n";
	}

	Derived3(const Derived3& rhs)	{
		std::cout << "Derived3 created by deep copy" << "\n";
	}

	~Derived3()	{
		std::cout << "~Derived3 destroyed" << "\n";
	}

	void ChangeAttributes() override {
		std::cout << "Derived3 Attributes Changed" << "\n";
	}

	Base* Clone() override {
		return new Derived3(*this);
	}
};

Base* Base::Create(int id){
	if (id == 1)
		return new Derived1;
	else if (id == 2)
		return new Derived2;
	else
		return new Derived3;
}
// Ending a Library 

//Utiliy Class
class User{
public:
	User() : pBase(0)	{
		// Creates any object of Base heirarchy at runtime 
		int input;
		std::cout << "Enter ID (1, 2 or 3): ";
		std::cin >> input;

		while ((input != 1) && (input != 2) && (input != 3))
		{
			std::cout << "Enter ID (1, 2 or 3 only): ";
			std::cin >> input;
		}

		// Create objects via the "Virtual Constructor" 
		pBase = Base::Create(input);
	}

	~User()	{
		if (pBase) {
			delete pBase;
			pBase = 0;
		}
	}

	void Action() {

		// Duplicate current object 
		Base* pNewBase = pBase->Clone();

		// Change its attributes 
		pNewBase->ChangeAttributes();

		// Dispose the created object 
		delete pNewBase;
	}

private:
	Base* pBase;
};

int main()
{
	User* user = new User();
	user->Action();

	delete user;

	/*
		Enter ID (1, 2 or 3): 1
		Derived1 created
		Derived1 created by deep copy
		Derived1 Attributes Changed
		~Derived1 destroyed (from user->Action();)
		~Derived1 destroyed (from delete user;)
	*/


	/*
		Enter ID (1, 2 or 3): 2
		Derived2 created
		Derived2 created by deep copy
		Derived2 Attributes Changed
		~Derived2 destroyed
		~Derived2 destroyed
	*/

	/*
		Enter ID (1, 2 or 3): 3
		Derived3 created
		Derived3 created by deep copy
		Derived3 Attributes Changed
		~Derived3 destroyed
		~Derived3 destroyed
	*/
}

// --------------------------------------------
// --------------------------------------------