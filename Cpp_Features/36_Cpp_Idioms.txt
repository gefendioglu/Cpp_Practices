
## RAII (Resource Acquisition In Initialization ) Idiom:

- The same definitions known as: Execute-around object, Resource release is finalization, Scope-bound resource management.

- It aims to guarantee the release of resource(s) at the end of a scope.

- Wrap resource into a class; resource acquired in the constructor immediately after its allocation; and automatically released in the destructor; resource used via an interface of the class.

- RAII guarantees the release of resource at the end of a scope/destruction (no resource leaks).

/----------------------------------------------
/----------------------------------------------

- **Example** : Without applying RAII

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class resource{
public:
    resource(int x, int y) { 
        std::cout << "Resource is acquired!!!" << "\n"; 
    }
    ~resource() { 
        std::cout << "Resource is destroyed!!!" << "\n"; 
    }
};

int main(){

    resource* ptr = new resource(1, 2);
    int x;

    std::cout << "Enter an integer: ";
    std::cin >> x;

    if (x == 0)
        throw 0; // the function returns early, and ptr won't be deleted, the memory allocated for ptr is leaked !
    if (x < 0)
        return; // the function returns early, and ptr won't be deleted!

    // ptr related codes...

    delete ptr;
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Applying RAII

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class resource {
public:
    resource(int x, int y) {
        std::cout << "Resource is acquired!!!" << "\n";
    }
    ~resource() {
        std::cout << "Resource is destroyed!!!" << "\n";
    }
};

template<class T>
class smart_ptr{
public:
    template<typename... Args>
    
    smart_ptr(Args&&... args) : m_ptr(new T(std::forward<Args>(args)...)) {}
    
    //Deleting --> if this class has private address value
    ~smart_ptr() { 
        delete m_ptr; 
    }

    // Deleting copy constructor
    smart_ptr(const smart_ptr& rhs) = delete;
   
    // Deleting copy assignment
    smart_ptr& operator=(const smart_ptr& rhs) = delete;

    // Defining move ctor - forwarding reference
    smart_ptr(smart_ptr&& rhs) : m_ptr(exchange(rhs.m_ptr, nullptr)) {}

    // Defining move assignment
    smart_ptr& operator=(smart_ptr&& rhs) {
        if (&rhs == this) 
            return *this;
        delete m_ptr;
        m_ptr = exchange(rhs.m_ptr, nullptr);
        return *this;
    }

    // Dereferencing operator overloading 
    // Because of unary operator, there is no parameters when doing in class definition
    T& operator*() const { 
        return *m_ptr; 
    }

    // Arrow operator overloading 
    // Because of unary operator, there is no parameters when doing in class definition
    T* operator->() const { 
        return m_ptr; 
    }

private:
    T* m_ptr;
};

int main(){

    // ptr guarantee the release of its resource
    auto ptr = smart_ptr<resource>(1, 2); 
    int x;
    std::cout << "Enter an integer: ";
    std::cin >> x;

    if (x == 0)
        throw 0; 
    if (x < 0)
        return EXIT_SUCCESS;

    // ptr related codes...

    return EXIT_SUCCESS;

    /*
        Resource is acquired!!!
        Enter an integer: 41
        Resource is destroyed!!!
    */
}  

/----------------------------------------------
/----------------------------------------------

## ODR (One Definition Rule) Idiom: 

- There must be a single definition of functions, classes, enums, etc.
- Undefined Behaviour --> in the case of ODR violation 
  - class definition
  - inline function definition

/----------------------------------------------
/----------------------------------------------

## CRTP:Curiously Recurring Template Pattern ( also known as F-Bounded Quantification) 

- separate out the type-dependent & independent functionality and bind type independent functionality with the base class using self-referencing template.

- CRTP idiom is widely used for static polymorphism without bearing the cost of dynamic polymorhpism (virtual dispatch mechanism). 

- Sanal fonksiyonlarýn kullanýlmasýnda hangi fonksiyonun çaðrýldýðý programýn çalýþma zamanýnda anlaþýldýðýnda --> (dynamic polymorphism or runtime polymorphism)

- Sanal fonksiyonlara yapýlan çaðrýlarda derleyici tipik olarak þöyle bir kod üretiyor:
  - Sýnýf nesnesinin içine bir gösterici (pointer) veri elemaný (data member) gömülüyor (virtual table pointer). Sanal fonksiyona bir çaðrý yapýldýðýnda virtual table pointerdan, virtual function table denilen bir veri yapýsýnýn adresi elde ediliyor. Sýnýf hiyerarþisi içinde bulunan her sýnýf için ayrý bir sanal fonksiyon tablosu oluþturuluyor.
  - Sanal fonksiyon göstericisi ile sanal fonksiyon tablosuna eriþiliyor ve (derleme zamanýnda elde edilen) bir indeks ile bu veri yapýsýndan bir sanal fonksiyonun adresi elde edilerek bu adresteki fonksiyon çaðrýlýyor. Böyle bir kod iki kez içerik alma (dereferencing) maliyeti içeriyor. Bellek kullanýmý açýsýndan baktýðýmýzda da her sýnýf nesnesi için bir bellek alanýna ihtiyaç duyuluyor.

- The advantages of CRTP: 
  - Functions are called directly. 
  - There is no need to be the same for base class function signature and derived class function signature. In dynamic polymorphism, you have to apply this rule.  

- The disadvantages of CRTP: 
  - kod miktarý daha fazla olma eðiliminde.
  - Hangi fonksiyonun çaðrýldýðý derleme zamanýnda belli olduðu için bu yapýnýn dynamic polymorphism'e göre daha kýsýtlý bir kullanýmý var.

static_cast<Der*>(this)->implementation();
Dilin kurallarýna göre bu dönüþümün geçerli olabilmesi için Base ve Der sýnýflarýnýn ayný hiyerarþi içinde bulunmasý gerekiyor.

/----------------------------------------------
/----------------------------------------------

- **Example** : The template of CRTP implementation 
  - Instantiating "Base" for "Derived" class does not require "Derived" to be complete, only to know that it is a class type.

template<typename Der>
class Base {
    //...
};

template <typename T>
class Der : public Base <Der> {
    //...
}

/----------------------------------------------
/----------------------------------------------

- **Example** : The implementation of CRTP

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

template <typename Der>
class Base {
public: 
    void interface() {
        static_cast<Der*>(this)->implementation();
    }
};

class Der : public Base<Der> {
public:
    void implementation() {
        std::cout << "Der implementation" << "\n";
    }
};

int main(){

    Der myder;
    myder.interface();  // "Der implementation"
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Sample code with dynamic polymorphism (using virtual functions)

#include <iostream>
#include <string>

class Pet {
public:
    void make_sound()   {
        std::cout << get_sound() << "\n";
    }
private:
    virtual std::string get_sound() const = 0;
};

class Dog : public Pet{
public:
    virtual std::string get_sound() const override {
        return{ "bark" };
    }
};

class Cat : public Pet {
public:
    virtual std::string get_sound() const override {
        return{ "meow" };
    }
};

void pet_game(Pet& pet)
{
    pet.make_sound();
    //...
}

int main()
{
    Cat mycat;
    Dog mydog;
    pet_game(mycat);
    pet_game(mydog);

    return EXIT_SUCCESS;

    /*
        meow
        bark
    */
}

/----------------------------------------------
/----------------------------------------------

- **Example** : The same sample code with static polymorphism (using base class template spcialization - CRTP)

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 
#include <string>

template <typename T>
class Pet {
public:
    void make_sound() {
        std::cout << thisObject().get_sound() << "\n";
    }
    // No virtual function definition/declaration
    // std::string T::get_sound() const; --> in Derived class
private:
    const T& thisObject() {
        return *static_cast<const T*>(this);
    }
};

class Dog : public Pet<Dog> { 
public:
    std::string get_sound() const {
        return{ "bark" };
    }
};

class Cat : public Pet<Cat> {
public:
    std::string get_sound() const {
        return{ "meow" };
    }
};

template<typename T>
void pet_game(Pet<T>& pet) {
    pet.make_sound();
}

int main() {

    Cat mycat;
    Dog mydog;
    pet_game(mycat);
    pet_game(mydog);

    return EXIT_SUCCESS;

    /*
        meow
        bark
    */
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Sample code with static polymorphism (using base class template spcialization - CRTP_II)

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

template <class T>
class compare {};

class value : public compare<value> {
public: 
    value(int x) : m_x{ x } {}
    bool operator<(const value& rhs) const { 
        return m_x < rhs.m_x; 
    }
private:
    int m_x;
};

// No need to write relational operators.
// Use only type dependent "operator <" & CRTP.
template <class T>
bool operator > (const compare<T>& lhs, const compare<T>& rhs) {
    return (static_cast<const T&>(rhs) < static_cast<const T&>(lhs));
}

/*  For the other operators: 
    == operator returns -->  !(lhs < rhs) && !(rhs < lhs)
    != operator returns -->  !(lhs == rhs)
    >= operator returns -->  (rhs < lhs) || (rhs == lhs)
    <= operator returns -->  (lhs < rhs) || (rhs == lhs)
*/

int main() {

    value v1{ 5 };
    value v2{ 10 };

    std::cout << std::boolalpha << "v1 > v2: " << (v1 > v2) << '\n';
    return EXIT_SUCCESS;
   
    /*
        v1 > v2: false
    */
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Sample code with static polymorphism (using base class template spcialization - CRTP_III)

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

template<typename T>
class animal {
public:
    void who() { 
        implementation().who(); 
    }
private:
    T& implementation() { 
        return *static_cast<T*>(this); 
    }
};

class dog : public animal<dog> {
public:
    void who() { 
        std::cout << "dog" << "\n"; 
    }
};

class cat : public animal<cat> {
public:
    void who() { 
        std::cout << "cat" << "\n"; }
};

template<typename T>
void get_animal(animal<T>& animal) {
    animal.who();
}

int main() {
    dog my_dog;
    cat my_cat;
   
    get_animal(my_dog);
    get_animal(my_cat);

    return EXIT_SUCCESS;

    /*
        dog
        cat
    */
}

/----------------------------------------------
/----------------------------------------------

- **Rule of Zero** : Special member functions should be written by user for the classes which have pointers or references as data members on the purpose of specifying their value semantics. 

/----------------------------------------------
/----------------------------------------------