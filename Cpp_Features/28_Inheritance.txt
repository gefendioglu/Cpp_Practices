
##Inheritance   

- **Example** : Object Oriented Programming (Inheritance, Virtual Functions)
  - A shapes library representing the different shapes in a vector-based drawing application.
  - At the top of the hierarchy is the "Shape" class, which defines the things that all shapes have in common
  - You can then specialize the shapes into "Rectangle" and "Ellipse" subclasses.
  - The Rectangle and Ellipse classes could be further specialized into "Square" and "Circle" subclasses.
  - Adding a new shape to the library shall be just a matter of subclassing one of the existing classes and implementing the things that are different.

#include <iostream>
#include <string>

class Point {
public:
	Point() = default;
	Point(int x, int y) :mx{ x }, my{ y } {}
	Point(const Point& other) {
		std::cout << "Copy constructor called " << "\n";
		mx = other.getX();
		my = other.getY();
	}

	Point& operator= (const Point& point) {
		std::cout << "Assignment operator called " << "\n";
		return *this;
	}

	// getter functions
	int getX() const { return mx; }
	int getY() const { return my; }

	//setter functions
	void setX(const int& x) { this->mx = x; }
	void setY(const int& y) { this->my = y; }

	// other functions
	Point* relativeTo(int dx, int dy) {
		return new Point(mx + dx, my + dy);
	}
private:
	int mx{ 0 }, my{ 0 };

};

class Rectangle;
class Graphics {};

class Shape {
public:

	Point getCenter() const { return center; }
	virtual Rectangle getBounds();
	virtual void draw(Graphics g);
protected:
	Point center;
	Shape() {
		this->center.setX(0);
		this->center.setY(0);
	}
	Shape(Point center) { this->center = center; }

};

class Rectangle : public Shape {
public:
	Rectangle() :height{ 0 }, width{ 0 } {}
	Rectangle(Point center, int h, int w) {
		this->center = center;
		height = h;
		width = w;
	}
	Rectangle getBounds() override {
		return *this;
	}
	void draw(Graphics g) override {
		// code to paint rectangle
	}
	int getHeight() const { return height; }
	int getWidth() const { return width; }

private:
	int height{ 0 };
	int width{ 0 };
};

class Ellipse : public Shape {
public:
	Ellipse() :horizontalAxis{ 0 }, verticalAxis{ 0 }{}
	Ellipse(Point center, int h, int v) {
		this->center = center;
		horizontalAxis = h;
		verticalAxis = v;
	}

	Rectangle getBounds() override {
		Rectangle* ptr = new Rectangle(center, horizontalAxis * 2, verticalAxis * 2);
		return (*ptr);
	}
	void draw(Graphics g) override {
		// code to paint ellipse
	}

	int getHorizontalAxis()const { return horizontalAxis; }
	int getVerticalAxis() const { return verticalAxis; }

private:
	int horizontalAxis{ 0 };
	int verticalAxis{ 0 };
};

int main()
{
	Shape* shape;
	Point* point_ptr = new Point(10, 20);
	Ellipse* ellipse_ptr = new Ellipse(*point_ptr, 30, 40);
	Rectangle* rectangle_ptr = new Rectangle(*point_ptr, 50, 60);

	std::cout << "rectangle : " << rectangle_ptr->getHeight() << " " << rectangle_ptr->getWidth() << "\n";
	std::cout << "ellipse : " << ellipse_ptr->getHorizontalAxis() << " " << ellipse_ptr->getVerticalAxis() << "\n";
}

// Error	LNK2001	unresolved external symbol "public: virtual class Rectangle __thiscall Shape::getBounds(void)" 
// Error	LNK2001	unresolved external symbol "public: virtual void __thiscall Shape::draw(class Graphics)" 


/----------------------------------------------
/----------------------------------------------

- **Example** : Interfaces && Abstract Classes 
  - An interface declares a set of related member functions, outside of any class.
    - An interface is equivalent to an abstract class with no data members and no method definitions.
	- In C++ an interface is defined by declaring a class with no data members and only pure virtual functions.
	- Supporting both interfaces and abstract classes are the provision of a default implementation of an interface via an abstract class.
  - An abstract class is an incomplete class definition that declares but does not define all its methods.
  - Abstract classes cannot be instantiated. Only the instances of concrete subclasses can be created.
  - In general, abstract classes are useful when the classes derived from them are more specific types of the base class (is-a relationship), particularly when there’s some shared functionality in the abstract base class that derived classes can use.

class StatusCallback {
public:
	virtual void updateStatus(int oState, int nState) = 0;
};

class MyClass : StatusCallback {
public:
	void updateStatus(int oState, int nState) override {
		if (nState > oState) {
			// code...
		}
	}
	// remainder of class
};


/----------------------------------------------
/----------------------------------------------

## MULTIPLE INHERITANCE: 
- In C++ a class can inherit (directly or indirectly) from more than one class, which is referred to as multiple inheritance. In C# and Java limit classes to single inheritance—each class inherits from a single parent class.

- Multiple inheritance is a useful way to create classes that combine aspects of two disparate class hierarchies.  If two frameworks define their own base classes for exceptions, you can use multiple inheritance to create exception classes that can be used with either framework.

- The complexities exist with multiple inheritance:
  - The problem with multiple inheritance is that it can lead to "ambiguity". 
  - The order in which the base classes are initialized when a derived object is constructed
  - The way members can be inadvertently hidden from derived classes.


- **Example** : The example is when a class inherits from two other classes, each of which inherits from the same class

/----------------------------------------------

class A {
protected:
	bool flag;
};
class B : public A {};
class C : public A {};
class D : public B, public C {
public:
	void setFlag(bool nflag) {
		flag = nflag; // Error: D::flag is ambiguous
		// The flag data member is defined by class A. 
		// But class D descends from class B and class C, which both derive from A. 
		// So in essence two copies of flag are available because two instances of A are in D’s class hierarchy.
		// Which one do you want to set ?
	}
};

/----------------------------------------------

- **Solution-1** : To specify which class data member is used with scope resolution operator --> B::flag = nflag; 
- **Solution-2** : To specify class A as virtual base classes to have only one A class object 

class A {
protected:
	bool flag;
};
class B : virtual public A {};
class C : virtual public A {};
class D : public B, public C {
public:
	void setFlag(bool nflag) {
		flag = nflag; 
	}
};

// --------------------------------------------
// --------------------------------------------
- **Example**:
When a derived object is declared, two virtual table pointers are created in the derived class object.




// --------------------------------------------
// --------------------------------------------

- **Example**:  Public Inheritance

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

//Base class 
class Parent{
public:
	int id_p;
};

// Sub class inheriting from Base Class(Parent) 
class Child : public Parent{
public:
	int id_c;
};

int main(){

	Child obj1;

	// An object of class child has all data members 
	// and member functions of class parent 
	obj1.id_c = 7;
	obj1.id_p = 91;
	std::cout << "Child id is " << obj1.id_c << "\n";
	std::cout << "Parent id is " << obj1.id_p << "\n";

	return 0;

	/*
		Child id is 7
		Parent id is 91
	*/
}


// --------------------------------------------
// --------------------------------------------

- **Example**: Modes of Inheritance

// A derived class doesn’t inherit access to private data members. 
class A{
public:
	int x;
protected:
	int y;
private:
	int z;
};

class B : public A {
	// x is public 
	// y is protected 
	// z is not accessible from B 
};

class C : protected A {
	// x is protected 
	// y is protected 
	// z is not accessible from C 
};

// 'private' is default for classes 
class D : private A {
	// x is private 
	// y is private 
	// z is not accessible from D 
};

// --------------------------------------------
// --------------------------------------------

- **Example**: Types of Inheritance in C++

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

// first base class 
class Vehicle {
public:
	Vehicle() {
		std::cout << "This is a Vehicle" << "\n";
	}
};

// second base class 
class FourWheeler {
public:
	FourWheeler() {
		std::cout << "This is a 4 wheeler Vehicle" << "\n";
	}
};

// Multiple Inheritance
// sub class derived from two base classes 
class Car : public Vehicle, public FourWheeler {
	//...
};

int main()
{
	// creating object of sub class will invoke the constructor of base classes 
	Car obj;
	return 0;
	/*
		This is a Vehicle
		This is a 4 wheeler Vehicle
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: Multiple Inheritance
  - The constructors of inherited classes are called in the same order in which they are inherited.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class A{
public:
	A() { std::cout << "A's constructor called" << "\n";}
	~A() { std::cout << "A's destructor called" << "\n"; }
};

class B{
public:
	B() { std::cout << "B's constructor called" << "\n"; }
	~B() { std::cout << "B's destructor called" << "\n"; }
};

// Multiple Inheritance
class C : public A, public B
{
public:
	C() { std::cout << "C's constructor called" << "\n"; }
	~C() { std::cout << "C's destructor called" << "\n"; }
};

int main()
{
	C c;
	return 0;

	/*
		A's constructor called
		B's constructor called
		C's constructor called
		C's destructor called
		B's destructor called
		A's destructor called
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: Diamond Problem

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class Person {
public:
	Person(int x) { 
		std::cout << "Person::Person(int ) called" << "\n"; 
	}
};

class Faculty : public Person {
public:
	Faculty(int x) :Person(x) {
		std::cout << "Faculty::Faculty(int ) called" << "\n";
	}
};

class Student : public Person {
public:
	Student(int x) :Person(x) {
		std::cout << "Student::Student(int ) called" << "\n";
	}
};

class TA : public Faculty, public Student {
public:
	TA(int x) :Student(x), Faculty(x) {
		std::cout << "TA::TA(int ) called" << "\n";
	}
};

int main() {

	TA ta1(30);

	// Person object is created twice.
	/*
		Person::Person(int ) called
		Faculty::Faculty(int ) called
		Person::Person(int ) called
		Student::Student(int ) called
		TA::TA(int ) called
	
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: The solution of diamond problem is the virtual inheritance

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class Person {
public:
	Person() { 
		std::cout << "Person::Person() called" << "\n";
	}
	Person(int x) { 
		std::cout << "Person::Person(int ) called" << "\n"; 
	}
};

class Faculty : virtual public Person {
public:
	Faculty(int x) :Person(x) {
		std::cout << "Faculty::Faculty(int ) called" << "\n";
	}
};

class Student : virtual public Person {
public:
	Student(int x) :Person(x) {
		std::cout << "Student::Student(int ) called" << "\n";
	}
};

class TA : public Faculty, public Student {
public:
	// Delegating Constructor
	TA(int x) :Student(x), Faculty(x) {
		std::cout << "TA::TA(int ) called" << "\n";
	}
};

int main() {

	TA ta1(30);

	// Person object is created twice.
	/*
		Person::Person(int ) called
		Faculty::Faculty(int ) called
		Student::Student(int ) called
		TA::TA(int ) called
	
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: How to call the parameterized constructor of the ‘Person’ class? 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class Person {
public:
	Person() { 
		std::cout << "Person::Person() called" << "\n";
	}
	Person(int x) { 
		std::cout << "Person::Person(int ) called" << "\n"; 
	}
};

class Faculty : virtual public Person {
public:
	Faculty(int x) :Person(x) {
		std::cout << "Faculty::Faculty(int ) called" << "\n";
	}
};

class Student : virtual public Person {
public:
	Student(int x) :Person(x) {
		std::cout << "Student::Student(int ) called" << "\n";
	}
};

class TA : public Faculty, public Student {
public:
	// Delegating Constructor
	TA(int x) :Student(x), Faculty(x), Person(x) {
		std::cout << "TA::TA(int ) called" << "\n";
	}
};

int main() {

	TA ta1(30);

	// Person object is created twice.
	/*
		Person::Person() called
		Faculty::Faculty(int ) called
		Student::Student(int ) called
		TA::TA(int ) called
	
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: The diamond problem sample 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class Top { public: int t; };
class Left : public Top { public: int l; };
class Right : public Top { public: int r; };
class Bottom : public Left, public Right { public: int b; };

int main() {

	Top* t_ptr1 = new Left;
	Top* t_ptr2 = new Right;
	
	Left* left = new Bottom;
	Right* right = new Bottom;
	
	Top* Top = new Bottom; // NOT OK !

	 /*
		Top* topL = (Left*)Bottom;
		Top* topR = (Right*)Bottom;
	*/
}


// --------------------------------------------
// --------------------------------------------

- **Example**: The solution for the previous diamond problem

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class Top { 
public: 
	int t; 
};

class Left : virtual public Top { 
public: 
	int l; 
};

class Right : virtual public Top { 
public: 
	int r; 
};

class Bottom : public Left, public Right { 
public: 
	int b; 
};

int main() {

	Top* t_ptr1 = new Left;
	Top* t_ptr2 = new Right;
	
	Left* left = new Bottom;
	Right* right = new Bottom;
	
	// There is only one Top instance included in the hierarchy
	Top* Top = new Bottom; // OK !
	
	Bottom* bot = new Bottom;
	bot->t; // OK !
}

// --------------------------------------------
// --------------------------------------------

- **Example**: Ouestion-1 Predict the output of following program:
  - Not Builded !!! 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class A{
public:
	void setX(int i) { x = i; }
	void print() { std::cout << x; }
private: 
	int x;
};

class B : public A{
public:
	B() { setX(10); }
};

class C : public A{
public:
	C() { setX(20); }
};

class D : public B, public C {
};

int main()
{
	D d;
	d.print(); // NOT OK !!! ambiguous
	return 0;
}

// --------------------------------------------
// --------------------------------------------

- **Example**: Ouestion-2 Predict the output of following program:
  - Not Builded !!! 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class A{
	int x;
public:
	A(int i) { x = i; }
	void print() { std::cout << x; }
};

class B : virtual public A{
public:
	B() :A(10) { }
};

class C : virtual public A{
public:
	C() :A(10) { }
};

// attempting to reference a deleted function because of "public B"	
// no default constructor exists for class "A"	
class D : public B, public C {
};

int main()
{
	D d;
	d.print();
	return 0;
}


// --------------------------------------------
// --------------------------------------------

- **Example**:  Multilevel Inheritance 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

// Base Class
class Vehicle{
public:
	Vehicle()	{
		std::cout << "This is a Vehicle" << "\n";
	}
};

class fourWheeler : public Vehicle{
public:
	fourWheeler()	{
		std:: cout << "Objects with 4 wheels are vehicles" << "\n";
	}
};

// sub class derived from two base classes 
class Car : public fourWheeler {
public:
	Car()	{
		std::cout << "Car has 4 Wheels" << "\n";
	}
};

int main()
{
	//creating object of Car invokes the constructor of base classes 
	Car obj;
	return 0;

	/*
		This is a Vehicle
		Objects with 4 wheels are vehicles
		Car has 4 Wheels
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: Inheritance and Friendship

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class A{
public:
	A() { x = 0; }
	friend void show();
protected:
	int x;
};

class B : public A{
public:
	B() : y(0) {}
private:
	int y;
};

void show(){
	B b;
	std::cout << "The default value of A::x = " << b.x;

	// Can't access private member declared in class 'B' 
	std::cout << "The default value of B::y = " << b.y;
}

int main(){

	show();
	return 0;
}

// --------------------------------------------
// --------------------------------------------