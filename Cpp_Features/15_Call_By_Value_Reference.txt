
/----------------------------------------------
/----------------------------------------------

* CALL BY VALUE - CALL BY REFERENCE : 

* C   --> always call-by-value
  C++ --> depends on function definition
		  func(int);   --> call-by-value OR 
		  func(int &); --> call-by-reference

* C --> setfunc(T *ptr); --> set function, setter, mutator
		getfunc(const T *ptr);  --> get function, getter, accessor
							    --> copy only pointer size, not all data
								--> applicable especially for arrays
		func(T value);		    --> copy all amount of data

* C --> setfunc(T *ptr);        --> output parameters
		getfunc(const T *ptr);  --> input parameters

* C++ --> class Data{};
		  void setter(Data &ref);       --> the parameter will be changed
		  void getter(const Data& ref); --> the parameter will only be read

/----------------------------------------------
/----------------------------------------------

* Swap Function with pointers - call by value

#include <iostream>

void Swap(int *ptr1, int *ptr2) {
	int temp = *ptr1;
	*ptr1 = *ptr2;
	*ptr2 = temp;
}

int main() {
	int firstNumber = 35;
	int secondNumber = 43;

	Swap(&firstNumber, &secondNumber);

	std::cout << "firstNumber : " << firstNumber << "\n";     // firstNumber = 43 
	std::cout << "secondNumber : " << secondNumber << "\n";     // secondNumber = 35
}

/----------------------------------------------
/----------------------------------------------

* Example: Swap Function with references - call by reference 

#include <iostream>

void Swap(int &ref1, int &ref2) {
	int temp = ref1;
	ref1 = ref2;
	ref2 = temp;
}

int main() {
	int firstNumber = 35;
	int secondNumber = 43;

	Swap(firstNumber, secondNumber);

	std::cout << "firstNumber : " << firstNumber << "\n";     // firstNumber = 43 
	std::cout << "secondNumber : " << secondNumber << "\n";     // secondNumber = 35
}

/----------------------------------------------
/----------------------------------------------

#include <iostream>

int main() {
	int firstNumber = 35;
	const int& ref1 = firstNumber;
	int const& ref2 = firstNumber;
	int& const ref3 = firstNumber;

	// ref1 = 30; --> Error: expression must be a modifiable lvalue
	// ++ref1; --> Error: expression must be a modifiable lvalue
}

/----------------------------------------------
/----------------------------------------------

* Example: getter function 

#include <iostream>

int getter(const int& ref) {
	return ref;
}

int main() {
	int firstNumber = 35;
	const int secondNumber = 43;
	
	std::cout << "getter(firstNumber): " << getter(firstNumber)<<"\n";
	std::cout << "getter(secondNumber): " << getter(secondNumber)<<"\n";
}

/----------------------------------------------
/----------------------------------------------

* Example: setter function, no conversion from const --> non-const

#include <iostream>

int setter(int& ref) {
	ref = 15;
	return ref;
}

int main() {
	int firstNumber = 35;
	const int secondNumber = 43;
	
	std::cout << "getter(firstNumber): " << setter(firstNumber)<<"\n";
	
	//std::cout << "getter(secondNumber): " << setter(secondNumber)<<"\n";

// Error: qualifiers dropped in binding reference of type "int &" to initializer of type "const int"

// Error : 'int setter(int &)' : cannot convert argument 1 from 'const int' to 'int &'
}

/----------------------------------------------
/----------------------------------------------

#include <iostream>

int main() {

	int firstNumber = 35;
	const int& ref = firstNumber; // firstNumber --> L-Value  
	const int& ref = 10; // 10 --> R Value 
	
	// A temporary object was defined for R Value 
	// int temp_object{10};
	// const int &ref = temp_object;
}

/----------------------------------------------
/----------------------------------------------

* Example: no conversion from const ref --> non-const ref

#include <iostream>

int main() {

	int firstNumber = 35;
	const int& ref1 = firstNumber; // firstNumber --> L-Value  
	const int& ref2 = 10; // 10 --> R Value 
	// A temporary object was defined for R Value 
	// int temp_object{10};
	// const int &ref = temp_object;

	// int& reference = ref2;
	// Error: 'initializing' cannot convert from 'const int' to 'int &'	
}

/----------------------------------------------
/----------------------------------------------

* Example: no reference to reference definition

#include <iostream>

int main() {

	int number = 35;
	int& ref1 = number;
	int& ref2 = ref1; // ref2 = number
	int& ref3 = ref2; // ref3 = number

	std::cout << "number: " << number << "\n"; // number = 35
	std::cout << "ref1: " << ref1 << "\n"; // ref1 = 35
	std::cout << "ref2: " << ref2 << "\n"; // ref2 = 35
	std::cout << "ref3: " << ref3 << "\n"; // ref3 = 35

	++ref1;
	++ref2;
	++ref3;

	std::cout << "number: " << number << "\n"; // number = 38
	std::cout << "ref1: " << ref1 << "\n"; // ref1 = 38
	std::cout << "ref2: " << ref2 << "\n"; // ref2 = 38
	std::cout << "ref3: " << ref3 << "\n"; // ref3 = 38
}

/----------------------------------------------
/----------------------------------------------