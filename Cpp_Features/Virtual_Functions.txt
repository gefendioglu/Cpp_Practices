


/----------------------------------------------
/----------------------------------------------

- **Example**: Virtual Functions & Inline Functions

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class Base{
public:
	virtual void who()	{
		std::cout << "I am Base" <<"\n";
	}
};

class Derived : public Base{
public:
	void who() override	{
		std::cout << "I am Derived" << "\n";
	}
};

int main()
{
	// virtual function who() is called through object of the class
	// it will be resolved at compile time
	// so it can be inlined
	Base base;
	base.who();

	// Virtual function is called through pointer, 
	// so it cannot be inlined 
	Base* ptr = new Derived();
	ptr->who();

	return 0;
}

/----------------------------------------------
/----------------------------------------------

- **Example**: What happens when a virtual function is called inside a non-virtual function in C++?




/----------------------------------------------
/----------------------------------------------

- **Example**: Concept of Virtual Functions 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class base {
public:
	virtual void print()	{
		std::cout << "print base class" << "\n";
	}

	void show(){
		std::cout << "show base class" << "\n";
	}
};

class derived : public base {
public:
	void print()	{
		std::cout << "print derived class" << "\n";
	}

	void show()	{
		std::cout << "show derived class" << "\n";
	}
};

int main()
{
	base* bptr;
	derived d;
	bptr = &d;

	// virtual function, binded at runtime 
	bptr->print();

	// Non-virtual function, binded at compile time 
	bptr->show();

	/*
		print derived class
		show base class
	*/
	
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Virtual Pointers (VPTR) - Virtual Table (VTABLE) 

