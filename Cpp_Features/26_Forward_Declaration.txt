
## Forward Declaration 

// --------------------------------------------
// --------------------------------------------

- **Example**:  Forward Declaration 

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

class A; // Forward Declaration for class A
class B; // Forward Declaration for class B

class B {
public:
	int x;

	void getdata(int n)	{
		x = n;
	}

	friend int sum(A, B);
};

class A {
public:
	int y;

	void getdata(int m)	{
		y = m;
	}

	friend int sum(A, B);
};

int sum(A m, B n){
	return m.y + n.x;
}

int main()
{
	B b;
	A a;
	
	a.getdata(5);
	b.getdata(4);
	std::cout << "The sum is : " << sum(a, b);
	// The sum is : 9
	
	return 0;
}
/----------------------------------------------
/----------------------------------------------

### Forward Declaration

-**Example**: Forward Declaration

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

// Forward Declaration for class A
class A;

class B {
public:
	void setData(int mdata)	{
		mx = mdata;
	}

	// Forward declaration is required for the parameters of sum func. 
	friend int sum(const A&, const B&);
private:
	int mx;
};

class A {
public:
	void setData(int mdata)	{
		my = mdata;
	}
	friend int sum(const A&, const B&);
private: 
	int my;
};

int sum(const A& m, const B& n){
	return (m.my + n.mx);
}

int main(){

	B b;
	A a;
	
	a.setData(5);
	b.setData(4);
	std::cout << "The sum is : " << sum(a, b);
	// The sum is : 9
	
	return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------

## "extern" C Definition

- name mangling --> name decoration
- How to use C code in C++ environment (in Linker phase)?

/----------------------------------------------
/----------------------------------------------

extern "C" int func1(int, int);
extern "C" int func2(int, int);
extern "C" int func3(int, int);
extern "C" int func4(int, int);

extern "C" {
	int func1(int, int);
	int func2(int, int);
	int func3(int, int);
	int func4(int, int);
}

/----------------------------------------------
/----------------------------------------------

- **Example** : predefined symbolic constant: __cplusplus

#ifdef __cplusplus
extern "C" {
#endif
	int func1(int, int);
	int func2(int, int);
	int func3(int, int);
	int func4(int, int);
#ifdef __cplusplus
}
#endif

/----------------------------------------------
/----------------------------------------------


## Function Re-Declaration

- If you add function scope for each of these function declarations, you receive a syntax error.

- function declaration without parameter name --> error in C

- function declaration without parameter name --> not error in C++

- Because this feature is used for function overlaoding and the unspecified name wont be used in function definition --> void func(int); 

```cpp
int foo(int x, int y);
int foo(int, int );       // function redecleration
double foo(int, int);     // syntax error
```

/----------------------------------------------
/----------------------------------------------

```cpp
// type alias
typedef int Word; // both C and C++
using Word = int; // C++
typedef int Int32;

int func(int);
int func(Int32); // function redeclaration, not syntax error
```

/----------------------------------------------
/----------------------------------------------

```cpp
int func(int);
int func(const int );
```

/----------------------------------------------
/----------------------------------------------

```cpp
void foo(int* ptr);
void foo(int *const ptr);
```

/----------------------------------------------
/----------------------------------------------

```cpp
int foo(int x, int y);
int foo(int x, int y = 10);
```

/----------------------------------------------
/----------------------------------------------