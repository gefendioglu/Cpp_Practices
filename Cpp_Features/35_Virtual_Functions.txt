
## VIRTUAL FUNCTIONS

- In OOP, child classes can override (redefine) virtual member functions defined by base classes. 

- The advantages of virtual functions: 
  - Dynamic polymorphism (Run-time polymorphism or late binding )
  - Reusability of code

- Virtual function is a kind of dynamic dispatching and the implementation of this mechanism is **completely compiler dependent**. There is no C++ standard defining such dynamic dispatching mechanism.

- Virtual member functions declared as "final" can not be overridden.

- In C++, functions are only virtual when declared with the virtual keyword, they are non-virtual as the default.

- If the function is not virtual, invoking the function is determined at compile time based on the type of the reference (or pointer). That's why, virtual functions are used for run time polymorphism (late binding).

- One special type of virtual function in C++ is a pure virtual function: a function declared but explicitly not defined.

- Any class that contains a pure virtual function or inherits one without redefining it is an **abstract class**.

- It almost always takes longer to invoke a virtual function because the address of the appropriate function definition must be looked up in a **virtual function table** before it is invoked. This table also requires a small amount of extra memory. 

- The object (having virtual base class) has memory layout divided in two regions:
  - **Invariant region**: non-virtual classes
  - **Shared region**: virtual classes 

- Virtual pointer/ Virtual Table:
  - A virtual table is an array of pointer to functions. It is generated per class statically at the compile time by the compiler. 

  - The code to override virtual function, virtual pointer is generated at the time of object construction by the compiler.

  - Calling virtual functions from a constructor or destructor is dangerous and should be avoided whenever possible. All C++ implementations should call the version of the function defined at the level of hierarchy in the current constructor and no further.
    - In a constructor, the virtual function call mechanism is disabled because overriding from derived classes hasn’t yet happened. Objects are constructed from the base up, “base before derived”.
	- Destruction is done “derived class before base class”, so virtual functions behave as in constructors: Only the local definitions are used and no calls are made to override functions to avoid touching the (now destroyed) derived class part of the object.


/----------------------------------------------
/----------------------------------------------

- **Example** : In the case of using non-virtual member functions 

#include <iostream>
#include <string>

class A {
public:
	void print() { std::cout << "A"; }
};

class B : A {
public:
	void print() { std::cout << "B"; }
};

class C : B {
public:
	void print() { std::cout << "C"; }
};

int main()
{
	A* aptr = new A();
	B* bptr = new B();
	C* cptr = new C();

	aptr->print(); // A
	bptr->print(); // B
	cptr->print(); // c

	// Because print() is not virtual, the print() function invoked depends on the type used at compile time (early binding):
	((B*)cptr)->print(); // B
	((A*)cptr)->print(); // A
	((A*)bptr)->print(); // A

}

/----------------------------------------------
/----------------------------------------------

- **Example** : In the case of using virtual member functions 

#include <iostream>
#include <string>

class A {
public:
	virtual void print() { std::cout << "A"; }
};

class B : A {
public:
	virtual void print() { std::cout << "B"; }
};

class C : B {
public:
	virtual void print() { std::cout << "C"; }
};

int main()
{
	A* aptr = new A();
	B* bptr = new B();
	C* cptr = new C();

	aptr->print(); // A
	bptr->print(); // B
	cptr->print(); // c

	// The run-time type of the object determines which function definition is invoked (late binding): 
	((B*)cptr)->print(); // C
	((A*)cptr)->print(); // C
	((A*)bptr)->print(); // B

}

/----------------------------------------------
/----------------------------------------------

- **Example**: Virtual Functions & Inline Functions

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Base{
public:
	virtual void who()	{
		std::cout << "Base::who() function is called" <<"\n";
	}
};

class Derived : public Base{
public:
	void who() override	{
		std::cout << "Derived::who() function is called" << "\n";
	}
};

int main()
{
	// Base::who() is called through object of the class, it will be resolved at compile time, so it can be inlined !!!
	Base base; 
	base.who(); 

	// Virtual function who() is called through pointer, it will be resolved at run rime (dynamic memory allocation), so it can not be inlined !!!
	Base* ptr = new Derived();
	ptr->who();

	return EXIT_SUCCESS;
	
	/*
		Base::who() function is called
		Derived::who() function is called
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: What happens when a virtual function is called inside a non-virtual function in C++?

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Base{
public:
	virtual void print() {
		std::cout << "virtual Base::print() is called" << "\n";
	}

	void invoke(){
		std::cout << "non-virtual Base::invoke() is called" << "\n";
		// calling a virtual func. from a non-virtual func. in Base class
		this->print(); 
	}
};

class Derived : public Base {
public:
	void print() override {
		std::cout << "overrided Derived::print() is called" << "\n";
	}
	void invoke() {
		std::cout << "Derived::invoke() is called" << "\n";
		// calling a virtual func. from a non-virtual func. in Derived class
		this->print();  
	}
}; 

int main(){

	Base* base = new Derived; // Derived -> Base (upcasting), dynamic
	base->invoke();

	return EXIT_SUCCESS;
	
	/*
		non-virtual Base::invoke() is called
		overrided Derived::print() is called
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Concept of Virtual Functions 

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class base {
public:
	virtual void print()	{
		std::cout << "virtual Base::print() is called" << "\n";
	}

	void show(){
		std::cout << "non-virtual Base::show() is called" << "\n";
	}
};

class derived : public base {
public:
	void print() override {
		std::cout << "overrided derived::print() is called" << "\n";
	}

	void show()	{
		std::cout << "derived::show() is called" << "\n";
	}
};

int main() {

	base* bptr;
	derived derived;
	bptr = &derived; // binded at runtime 

	// Virtual function, binded at runtime 
	bptr->print();

	// Non-virtual function, binded at compile time 
	bptr->show();

	/*
		overrided derived::print() is called		
		non-virtual Base::show() is called
	*/
	
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Virtual pointer (VPTR) - Virtual Table (VTABLE) 

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class base {
public:
	void fun_1() { std::cout << "base::fun_1()" << "\n"; }
	virtual void fun_2() { std::cout << "base::fun_2()" << "\n";}
	virtual void fun_3() { std::cout << "base::fun_3()" << "\n";}
	virtual void fun_4() { std::cout << "base::fun_4()" << "\n";}
};

class derived : public base {
public:
	void fun_1() { 
		std::cout << "derived::fun_1()" << "\n";
	}
	void fun_2() override { 
		std::cout << "overrided derived::fun_2()" << "\n";
	}
	void fun_4(int x) override { 
		std::cout << "derived::fun_4(int x)" << "\n";
	}
};

int main() {

	base* bptr;
	derived derived; // derived -> bptr (upcasting)
	bptr = &derived; // run-time binded for virtual funcs.

	// Early binding, fun_1() is non-virtual in base 
	bptr->fun_1();

	// Late binding (Run Time Polymorphism - RTP) 
	bptr->fun_2();

	// Late binding (RTP)
	bptr->fun_3();

	// Late binding (RTP)
	bptr->fun_4();

	// Early binding, but this fun_4() function call is illegal
	// because pointer is of base type and fun_4() function is of derived class 
	// bptr->fun_4(5); // NOT OK! - too many arguments error

	/*
		base::fun_1()
		overrided derived::fun_2()
		base::fun_3()
		base::fun_4()
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Default Arguments && Virtual Function

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Base{
public:
	virtual void fun(int x = 0)	{
		std::cout << "Base::fun(int x = 0), x = " << x << "\n";
	}
};

class Derived : public Base {
public:
	virtual void fun(int x = 10) {
		std::cout << "Derived::fun(int x = 10), x = " << x << "\n";
	}
};

int main() {

	Derived d1;
	Base* bp = &d1;
	bp->fun();

	return EXIT_SUCCESS;

	/* Derived::fun(int x = 10), x = 0 */
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Calling Virtual Functions in Constructor/Destructor

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Dog{
public:
	Dog() {
		std::cout << "Dog() Constructor" << "\n";
		bark();
	}

	~Dog() {
		bark();
	}

	virtual void bark(){
		std::cout << "virtual Dog::bark()" << "\n";
	}

	void seeCat(){
		bark();
	}
};

class YellowDog : public Dog {
public:
	YellowDog(){
		std::cout << "YellowDog() Constructor" << "\n";
	}

	void bark()	override{
		std::cout << "YellowDog::bark()" << "\n";
	}
};

int main()
{
	YellowDog dog;
	dog.seeCat();

	/*
		Dog() Constructor
		virtual Dog::bark()
		YellowDog() Constructor
		YellowDog::bark()
		virtual Dog::bark()
	*/
}

// --------------------------------------------
// --------------------------------------------

- **Example**: Can virtual functions be private in C++ ?

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

// Base Class
class base{
public:
	base() { std::cout << "base::base() constructor" << "\n"; }
    
	virtual ~base()	{
		std::cout << "base::~base() destructor"<< "\n";
	}

	void show()	{
		std::cout << "base::show()" << "\n";
	}

	virtual void print(){
		std::cout << "virtual base::print()" << "\n";
	}
};

// Derived Class from Base Class
class derived : public base {
public:
	derived(): base() {
		std::cout << "derived::derived() constructor" << "\n";
	}

	 /* if this class inherits from a base class --> always use virtual destructors */
	virtual ~derived()	{
		std::cout << "derived::~derived() destructor" << "\n";
	}

private:
	 /* private virtual function in derived class overwrites base class virtual function, function is called with base class pointer or derived class object */
	virtual void print(){
		std::cout << "private derived::print()" << "\n";
	}
};

int main() {

	// construct base class pointer with derived class memory
	base* b_ptr = new derived();
	b_ptr->show();

	/* print() is private member in derived class, still the contents of derived class are printed. because base class defines a public interface and drived class overrides it in its implementation*/
	b_ptr->print();

	delete b_ptr;

	/*
		base::base() constructor
		derived::derived() constructor
		base::show()
		private derived::print()
		derived::~derived() destructor
		base::~base() destructor
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Virtual Functions in Derived Classes

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class A {
public:
	virtual void fun()	{
		std::cout << "A::fun() called" << "\n";
	}
};

class B : public A {
public:
	void fun() override	{
		std::cout << "B::fun() called" << "\n";
	}
};

class C : public B {
public:
	void fun()	override {
		std::cout << "C::fun() called" << "\n";
	}
};

int main() {

	C c; 
	B* b = &c; // Derived --> Base (upcasting)
	b->fun(); 

	return EXIT_SUCCESS;
	/* C::fun() called */
}


/----------------------------------------------
/----------------------------------------------

- **Example**: Virtual Functions with Composition

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Foo{
public:
	Foo() { std::cout << "Foo ctor" << "\n"; }
	~Foo() { std::cout << "~Foo dtor" << "\n"; }
};

class base {
public:
	base() { std::cout << "base ctor" << "\n";}
	~base() { std::cout << "~base dtor" << "\n";}
};

class Bar : public base{
public:
	Bar(){
		std::cout << "Bar ctor" << "\n";
		str = 0;
	}

	~Bar() { std::cout << "~Bar dtor" << "\n";}

private:
	Foo foo;
	char* str;
};

int main() {

	base* bptr;
	Bar bar;
	bptr = &bar;

	return EXIT_SUCCESS;
	/*
		base ctor
		Foo ctor
		Bar ctor
		~Bar dtor
		~Foo dtor
		~base dtor
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Before Using Virtual Functions && Run Time Polymorphism (Late Binding)

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

#define BLUETOOTH 0
#define WIFI 1

class wifi_t {
public:
	void authenticate() {
		std::cout << "wifi_t::authenticate()" << "\n";
	}

	void connect() {
		std::cout << "wifi_t::connect()" << "\n";
	}
private:
	char pass[15];
};

class bluetooth_t {
public:
	void authenticate() {
		std::cout << "bluetooth_t::authenticate()" << "\n";
	}
	void connect() {
		std::cout << "bluetooth_t::connect()" << "\n";
	}
private:
	char pass[15];
};


int main()
{
	wifi_t* wifi = new wifi_t();
	bluetooth_t* bluetooth = new bluetooth_t();

	int pt = BLUETOOTH;

	if (pt == BLUETOOTH) {
		bluetooth->authenticate();
		bluetooth->connect();
	}
	else if (pt == WIFI) {
		wifi->authenticate();
		wifi->connect();
	}

	return EXIT_SUCCESS;

	/*
		bluetooth_t::authenticate()
		bluetooth_t::connect()
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Using with Virtual Functions && Run Time Polymorphism for the previous example 

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class protocol {
public:
	protocol() { 
		type = new uint8_t; 
	}
	virtual ~protocol() { 
		std::cout << "protocol::~protocol()" << "\n";
		delete type; 
	}
	virtual void authenticate() {
		std::cout << "protocol_t::authenticate()" << "\n";
	}
	virtual void connect() {
		std::cout << "protocol_t::connect()" << "\n";
	}
private:
	uint8_t* type;
};

/* When wifi_t class is inherited from protocol_t class, a new virtual table will be created by the compiler.*/
class wifi : public protocol {
public:
	wifi() {
		pass = new char[15]; 
	}
	~wifi() { 
		std::cout << "wifi::~wifi()" << "\n";
		delete pass; 
	}
	void authenticate() {
		std::cout << "wifi::authenticate()" << "\n";
	}
	void connect() {
		std::cout << "wifi::connect()" << "\n";
	}
private:
	char* pass;
};

/* When bluetooth_t class is inherited from protocol_t class, a new virtual table will be created by the compiler.*/
class bluetooth : public protocol {
public:
	bluetooth() { 
		pass = new char[15]; 
	}
	~bluetooth() { 
		std::cout << "bluetooth_t::~bluetooth_t()" << "\n";
		delete pass; 
	}

	void authenticate() {
		std::cout << "bluetooth::authenticate()" << "\n";
	}
	void connect() {
		std::cout << "bluetooth::connect()" << "\n";
	}
private:
	char* pass;
};

void makeConnection(protocol* protocol) {
	protocol->authenticate();
	protocol->connect();
	delete protocol;
}

int main() {

	protocol* pt = new wifi();
	makeConnection(pt);
	
	std::cout << "\n";

	bluetooth bluetooth;
	pt = &bluetooth;
	makeConnection(pt);

	return EXIT_SUCCESS;

	/*
		wifi::authenticate()
		wifi::connect()
		wifi::~wifi()
		protocol::~protocol()

		bluetooth_t::authenticate()
		bluetooth_t::connect()
		bluetooth_t::~bluetooth_t()
		protocol::~protocol()
	*/
}

/----------------------------------------------
/----------------------------------------------

- **Example**: 

