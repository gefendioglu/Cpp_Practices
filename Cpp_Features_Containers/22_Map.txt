
## Map 

/ ----------------------------------------------
/ ----------------------------------------------

- **Example**: std::map

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iterator> 
#include <map> 

using namespace std;

int main()
{

	// empty map container 
	map<int, int> gquiz1;

	// insert elements in random order 
	gquiz1.insert(pair<int, int>(1, 40));
	gquiz1.insert(pair<int, int>(2, 30));
	gquiz1.insert(pair<int, int>(3, 60));
	gquiz1.insert(pair<int, int>(4, 20));
	gquiz1.insert(pair<int, int>(5, 50));
	gquiz1.insert(pair<int, int>(6, 50));
	gquiz1.insert(pair<int, int>(7, 10));

	// printing map gquiz1 
	// map<int, int>::iterator itr;

	cout << "\nThe map gquiz1 is : \n";
	cout << "\tKEY\tELEMENT\n";
	for (auto itr = gquiz1.begin(); itr != gquiz1.end(); ++itr) {
		cout << '\t' << itr->first
			<< '\t' << itr->second << '\n';
	}
	cout << endl;

	// assigning the elements from gquiz1 to gquiz2 
	map<int, int> gquiz2(gquiz1.begin(), gquiz1.end());

	// print all elements of the map gquiz2 
	cout << "\nThe map gquiz2 after"
		<< " assign from gquiz1 is : \n";
	cout << "\tKEY\tELEMENT\n";
	for (auto itr = gquiz2.begin(); itr != gquiz2.end(); ++itr) {
		cout << '\t' << itr->first
			<< '\t' << itr->second << '\n';
	}
	cout << endl;

	// remove all elements up to element with key=3 in gquiz2 
	cout << "\ngquiz2 after removal of elements less than key=3 : \n";
	cout << "\tKEY\tELEMENT\n";
	gquiz2.erase(gquiz2.begin(), gquiz2.find(3));
	for (auto itr = gquiz2.begin(); itr != gquiz2.end(); ++itr) {
		cout << '\t' << itr->first
			<< '\t' << itr->second << '\n';
	}

	// remove all elements with key = 4 
	int num;
	num = gquiz2.erase(4);
	cout << "\ngquiz2.erase(4) : ";
	cout << num << " removed \n";
	cout << "\tKEY\tELEMENT\n";
	for (auto itr = gquiz2.begin(); itr != gquiz2.end(); ++itr) {
		cout << '\t' << itr->first
			<< '\t' << itr->second << '\n';
	}

	cout << endl;

	// lower bound and upper bound for map gquiz1 key = 5 
	cout << "gquiz1.lower_bound(5) : "
		<< "\tKEY = ";
	cout << gquiz1.lower_bound(5)->first << '\t';
	cout << "\tELEMENT = "
		<< gquiz1.lower_bound(5)->second << endl;
	cout << "gquiz1.upper_bound(5) : "
		<< "\tKEY = ";
	cout << gquiz1.upper_bound(5)->first << '\t';
	cout << "\tELEMENT = "
		<< gquiz1.upper_bound(5)->second << endl;

	return 0;
}


The map gquiz1 is :
        KEY     ELEMENT
        1       40
        2       30
        3       60
        4       20
        5       50
        6       50
        7       10


The map gquiz2 after assign from gquiz1 is :
        KEY     ELEMENT
        1       40
        2       30
        3       60
        4       20
        5       50
        6       50
        7       10


gquiz2 after removal of elements less than key=3 :
        KEY     ELEMENT
        3       60
        4       20
        5       50
        6       50
        7       10

gquiz2.erase(4) : 1 removed
        KEY     ELEMENT
        3       60
        5       50
        6       50
        7       10

gquiz1.lower_bound(5) :         KEY = 5         ELEMENT = 50
gquiz1.upper_bound(5) :         KEY = 6         ELEMENT = 50


// --------------------------------------------
// --------------------------------------------

- **Example**: std::map::find()

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iterator> 
#include <map> 


using namespace std;

int main()
{
	// declaring map of char and int 
	map< char, int > mp;

	// declaring iterators 
	map<char, int>::iterator it;
	map<char, int>::iterator it1;

	// inserting values 
	mp['a'] = 5;
	mp['b'] = 10;
	mp['c'] = 15;
	mp['d'] = 20;
	mp['e'] = 30;

	// using find() to search for 'b' key found 
	// "it" has address of key value pair. 
	it = mp.find('b');

	if (it == mp.end())
		cout << "Key-value pair not present in map";
	else
		cout << "Key-value pair present : "
		<< it->first << "->" << it->second;

	cout << endl;

	// using find() to search for 'm' key not found 
	// "it1" has address of end of map. 
	it1 = mp.find('m');

	if (it1 == mp.end())
		cout << "Key-value pair not present in map";
	else
		cout << "Key-value pair present : "
		<< it1->first << "->" << it1->second;

	return 0;

	/*
		Key - value pair present : b->10
		Key - value pair not present in map
	*/
	

}

// --------------------------------------------
// --------------------------------------------

-**Example**: std::map::contains(C++20) 

std::map<uint32_t, uint32_t> freq{{3, 1}, {1, 1}, {2, 1}}; 
if (auto search = freq.find(2); search != freq.end()) {
    std::cout << "Found" << "\n";
}

- Instead of using the previous type: 

std::map<uint32_t, uint32_t> freq{{3, 1}, {1, 1}, {2, 1}}; 
if (freq.contains(2)) {
    std::cout << "Found" << "\n";
}

// --------------------------------------------
// --------------------------------------------

-**Example**: std::map::try_emplace(C++17) - this example will be controlled
  - Inserting an element in std::map is done by using operator[ ], "std::map::insert" or "std::map::emplace" are costly in terms of calling default/specialized constructor or assignment. 
  - This method creates items only if the key doesn’t exist yet. This boosts the performance in case objects of that type are expensive to create.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <map> 
#include <vector> 
#include <cassert> 

int main() {
	
	std::vector<int> ivec{ 3, 4, 5, 8, 7, 3, 5, 2, 4 };
	std::map<uint32_t, uint32_t> imap;
	for (const auto& n : ivec) {
		if (const auto& [it, inserted] = imap.try_emplace(n, 1); !inserted) { // instead of imap.emplace(n,1)
			it->second++;
		}
		
	}
	assert(imap[3] == 2);

	return EXIT_SUCCESS;
}



- **Example**: std::map::lower_bound()
- **Example**: std::map::upper_bound()
- **Example**: std::map::equal-range()