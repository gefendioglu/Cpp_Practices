
## DOUBLY LINKED LISTS


/----------------------------------------------
/----------------------------------------------

## The operations of doubly linked lists:

  - Appending a node:
    - Get the new node
    - Check if node exists with the same key
      - if true --> abort
      - if false --> continue
    - if head == nullptr then append at the beginning
      - else traverse to the end of the list to find a node to be appended 
   - Append new node at the end of doubly linked list

  - Prepending a node:
    - Get the new node
    - Check if node exists with the same key
      - if true --> abort
      - if false --> continue
    - head->previous = new_node
    - new_node->next = head
    - head = new_node

  - Inserting a node:
    - Get the new node & the key of node in the list after which you want to link this new node
    - Check if node exists with the same key as new node
      - if true --> abort
      - if false --> continue
    - Check if node exists with the key entered by user
      - if true --> abort
      - if false --> continue
    - Access node N after which you want to append new node new_node
      - if N is at the end, then 
        - N->next = new_node
        - new_node->previous = N
      - if N is in between, then
        - new_node->next = N->next
        - N->next->previous = new_node
        - new_node->previous = N
        - N->next = new_node

    - Deleting a node:
      - Get the key of node that you want to delete
      - Check if node exists with the same key as new node
        - if true --> abort
        - if false --> continue
      - Check the head
        - if head == nullptr --> the list is empty
        - if head != nullptr && key matches head node --> head = head->next 
        - if head != nullptr && key doesnt match head node --> traverse to the node with the key
      - Check the node place
        - if node at the end --> prevNode->next == nullptr
        - if node is in between -->
          - prevNode->next = nextNode
          - nextNode->previous = prevNode

     - Updating a node:
      - Get the key of node that you want to delete
      - Check if node exists with the same key as new node
        - if true --> abort
        - if false --> continue
      - Traverse to that node
      - Update the data value

/----------------------------------------------
/----------------------------------------------

- **Example** : Doubly Linked Lists example (from video)