/----------------------------------------------
/----------------------------------------------

- **Example**: 
  - Write a program that prints the numbers from 1 to 100. 
  - If a number is divisible by 3, print “Fizz” instead of the number, 
  - If a number is divisible by 5, print “Buzz” instead of the number, 
  - If a number is divisible by both 3 and 5, print “FizzBuzz” instead of the number.

#include <iostream>

int main()
{
    for (int i = 1; i <= 100; ++i) {
        bool divByThree = (i % 3 == 0);
        bool divByFive = (i % 5 == 0);
        if (divByThree && divByFive) {
            std::cout << "FizzBuzz" << "\n";
        }
        else if (divByThree) {
            std::cout << "Fizz" << "\n";
        }
        else if (divByFive) {
            std::cout << "Buzz" << "\n";
        }
        else {
            std::cout << i << "\n";
        }
    }
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Write a function that reverses a string without using any library functions.

#include <iostream>
#include <string>

std::string reverse(std::string& str) {
	std::string out = "";
	for (size_t i = str.length() - 1; i >= 0; --i)
		out += str.at(i);
	return out;
}

int main()
{
	std::string str = "Gamze Efendioglu";
	reverse(str);
}

/----------------------------------------------
/----------------------------------------------

- **Example**:
  - Given an unsorted list of integers, write a function that returns a new list with all duplicate values removed.

#include <iostream>
#include <list>

std::list<int> removeDuplicates(const std::list<int>& in) {
	std::list<int> out;
	for (auto ival : in) {
		bool found = false;
		for (auto oval : out) {
			if (ival == oval) {
				found = true;
				break;
			}
		}
		if (!found) 
			out.push_back(ival);
	}
	return out;
}

int main()
{
	std::list<int> ilist{ 1, 5, 6, 8, 9, 4, 5, 6, 7, 9, 1, 2, 5 };
	std::cout << "old list : "; 
	for (auto i : ilist)
		std::cout << i << " ";

	std::cout << "\n\n";

	std::list<int> new_list = removeDuplicates(ilist);
	std::cout << "new list : ";
	for (auto i : new_list)
		std::cout << i << " "; // not the same sequence 

	std::cout << "\n\n";
}

/----------------------------------------------
/----------------------------------------------

- **Example**: 
  - The same problem can be solved by converting the list to a set, which doesn’t allow duplicated values. Sets don’t preserve the original ordering of their data (as the problem statement doesn’t require that ordering be preserved).

#include <iostream>
#include <list>
#include <unordered_set>

std::list<int> removeDuplicates(const std::list<int>& in) {
	std::unordered_set<int> s(in.begin(), in.end());
	std::list<int> out(s.begin(), s.end());
	return out;
}

int main()
{
	std::list<int> ilist{ 1, 5, 6, 8, 9, 4, 5, 6, 7, 9, 1, 2, 5 };
	std::cout << "old list : "; 
	for (auto i : ilist)
		std::cout << i << " ";

	std::cout << "\n\n";

	std::list<int> new_list = removeDuplicates(ilist);
	std::cout << "new list : ";
	for (auto i : new_list)
		std::cout << i << " "; // not the same sequence 

	std::cout << "\n\n";
}

/----------------------------------------------
/----------------------------------------------

- **Example**: TO BE COMPLETED
  - You are given a string that contains left and right parenthesis characters.
  - Write code to determine whether the parentheses are correctly nested. 
  - For example, the strings "(())" and "()()" are correctly nested but "(()()" and ")(" are not.

- **Solution**:
  - There will be an equal number of left and right parentheses (counting problem)
  - Using a single variable that tracks the relative number of left and right parentheses.
  - Increment a counter when you see a left parenthesis, and decrement it when you see a right parenthesis.
  - If at the end the counter is nonzero, you know you don’t have a properly nested string.
  - For the final case ")(" the final counter value would be zero, so you would erroneously conclude that the nesting was correct.
  - It’s not sufficient for there to be merely the same number of right and left parentheses; every right parenthesis has to come after a left parenthesis that it’s paired with.
  - Put in terms of the counter that you’re using, it’s not sufficient for it to end at zero; it also has to never be negative.
  - The counter can only become negative after it’s decremented, so you can just check immediately following the decrement.


#include <iostream>
#include <list>
#include <set>

bool checkNesting(std::string str) {
	int count = 0;
	for (int i = 0; i < str.length(); ++i) {
		char ch = str.at(i);
		if (ch == '(') {
			++count;
		}
		else if (ch == ')') {
			--count;
			if (count < 0)
				return false;
		}
	}
	return count == 0;
}

int main()
{
	std::string str_test1 = "(())";
	std::string str_test2 = "()()";
	std::string str_test3 = "(()()";
	std::string str_test4 = ")(";

	std::set<std::string> str_test{ str_test1 ,str_test2, str_test3, str_test4 };
	for (const auto& i : str_test) {
		if (checkNesting(str_test.))
			std::cout << "True";
	}
}

/----------------------------------------------
/----------------------------------------------

## BIG O ANALYSIS : 
- The general procedure for Big-O runtime analysis is as follows:
  1. Figure out what the input is and what n represents.
  2. Express the number of operations the algorithm performs in terms of n.
  3. Eliminate all but the highest-order terms.
  4. Remove all constant factors

- Which Algorithm Is Better? (From the best to the worst) 
  - O(1) : The fastest running time (constant running time)
  - O(log n) : A logarithmic running time if it increases logarithmically in proportion to the input size.
  - O(n) : A linear algorithm’s running time increases in direct proportion to the input size.
  - O(n log n) : A quasilinear algorithm is midway between a linear algorithm and a polynomial algorithm.
  - O(nc) : A polynomial algorithm grows quickly based on the size of the input.
  - O(cn) : An exponential algorithm grows even faster than a polynomial algorithm.
  - O(n!) : A factorial algorithm grows the fastest and becomes quickly unusable for even small values of n.
  - Algorithms that run in constant-O(1), logarithmic-O(log n), linear-O(n) , or quasilinear-O(n log n) time are preferred !!!

/----------------------------------------------
/----------------------------------------------

- **Example**: Big O Analysis
  - Consider a simple function that returns the maximum value stored in an array of nonnegative integers. The size of the array is n.
  - What are the complexities of CompareToMax and CompareToAll functions?
  - In CompareToMax, each array element was compared once to a maximum value. Thus, the input items are each examined once, resulting in n examinations. --> O(n)
  - In CompareToMax, the best-case, average-case, and worst-case running times are identical. Regardless of the arrangement of the values in the array, the algorithm is always O(n).

  - In CompareToAll, this function may compare each of n elements to n other elements. Thus you have nxn examinations, so this is an O(n^2) algorithm.
  - The analysis of CompareToAll 
    - a worst-case scenario: the maximum value was at the end of the array ---> O(n^2)
	- an average case scenario: the largest value is in the middle
	  - checking n(n/2) = n^2/2 times --> O(n^2/2) running time
	  - the average case for CompareToAll is no better than the worst case ---> O(n^2)
	- a best-case scenario: the maximum value is at the beginning of the array
	  - The maximum value is compared to all other values only once --> O(n) 
  - As the array grows, the number of comparisons in CompareToAll becomes much larger than in CompareToMax

  - There is a check in CompareToMax to ensure that the array is not empty and a step that initializes the curMax variable. It may seem more accurate to call this an O(n + 2) function to reflect these extra operations. As n approaches infinity, the difference between n and n + 2 is insignificant, so the constant term can be ignored.
  - Similarly, for an algorithm running in n + n^2 time, the difference between n^2 and n + n^2 is negligible for a very large n.
  - In Big-O analysis you eliminate all but the highest-order term.

#include <iostream>
#include <array>

// Returns the largest value in an array of n non-negative integers 
int CompareToMax(int array[], int n) {
	int curMax, i;

	// Make sure that there is at least one element in the array.
	if (n <= 0)
		return -1;

	// Set the largest number so far to the first array value.
	curMax = array[0];

	// Compare every number with the largest number so far. 
	for (i = 1; i < n; i++) {
		if (array[i] > curMax) {
			curMax = array[i];
		}
	}
	return curMax;
}

int CompareToAll(int array[], int n) {

	int i, j;
	bool isMaxValue;

	// Make sure that there is at least one element in the array.
	if (n <= 0)
		return -1;

	for (i = 0; i < n; ++i)
	{
		isMaxValue = true;
		for (j = 0; j < n; ++j)
		{
			// See if any value is greater.
			if (array[j] > array[i]) {
				isMaxValue = false; // array[i] is not the largest value.
				break;
			}
		}
		// If isMaxValue is true, no larger value exists; array[i] is max.
		if (isMaxValue)
			break;
	}
	return array[i];
}

int main()
{
	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };
	std::cout << "max value : " << CompareToAll(arr, sizeof(arr) / sizeof(&arr[0])) << "\n";

	std::cout << "max value : " << CompareToMax(arr, sizeof(arr) / sizeof(&arr[0])) << "\n";
	// max value : 9
}
/----------------------------------------------
/----------------------------------------------

## LINKED LISTS
- Three basic kinds of linked lists exist: 
  - Singly linked lists
  - Doubly linked lists 
  - Circular linked lists 

## Singly Linked Lists
- Each data element in the list has a link (a pointer or reference) to the element that follows it in the list. 
- The first element in a singly linked list is referred to as the "head" of the list. 
- The last element in such a list is called the "tail".

- When defining classes in C++ for singly linked list, particularly in template form, it’s best to add copy constructors and copy assignment operators so you don’t depend on the compiler- generated versions.

/----------------------------------------------
/----------------------------------------------

- **Example**: Tracking the Head Element (Inserting an element at the front of a list)
  - In C++, the head pointer could also be passed in by reference, or the function could return the new head pointer.

// when return value is a class pointer type
IntElement* IntElement::insertInFront(IntElement** head, int data) {
	IntElement* newElem =new IntElement(data);
	if (!newElem)
		return nullptr;
	newElem->data = data;
	newElem->next = *head;  // The correct version passes in a pointer to the head pointer
	*head = newElem;
	return newElem;
}

// when return value is bool 
bool IntElement::insertInFront(IntElement** head, int data) {
	IntElement* newElem =new IntElement(data);
	if (!newElem)
		return false;
	newElem->data = data;
	newElem->next = *head;  // The correct version passes in a pointer to the head pointer
	*head = newElem;
	return true;
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Traversing a List
  - When traversing, you must always check that you haven’t reached the end of the list.
  - Deletion and insertion require a pointer or reference to the element immediately preceding the deletion or insertion location.

IntElement* IntElement::find(IntElement* head, int data) {
	IntElement* elem = head;
	while (elem != nullptr && elem->getData() != data) {
		elem = elem->getNext();
	}
	return elem;
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Inserting and Deleting Elements
  - Any insertion or deletion of elements in the middle of a list requires modification of the previous element’s next pointer or reference.
  - If you’re given only the element to delete (or before which to insert), this requires traversal of the list from the head because there’s no other way to find the preceding element. 
  - Special care must be taken when the element to be deleted is the head of the list.
  - Deletion and insertion require a pointer or reference to the element immediately preceding the deletion or insertion location. 

/----------------------------------------------

- **Example**: First implementation for deleting elements  from a singly linked list

bool IntElement::deleteElement(IntElement** head, IntElement* deleteMe)
{
	IntElement* elem;
	if (!head || !*head || !deleteMe) /* Check for null pointers */
		return false;

	elem = *head;
	if (deleteMe == *head) { /* special case for head */
		*head = elem->next;
		free(deleteMe);
		return true;
	}
	while (elem) {
		if (elem->next == deleteMe) {
			/* elem is element preceding deleteMe */
			elem->next = deleteMe->next;
			free(deleteMe);
			return true;
		}
		elem = elem->next;
	}
	/* deleteMe not found */
	return false;
}

/----------------------------------------------

- **Example**: Second implementation for deleting elements from a singly linked list 

bool IntElement::deleteElement_I(IntElement** npp, IntElement* deleteMe) {

	IntElement* elem;

	if (!npp || !*npp || !deleteMe) /* Check for null pointers */
		return false;

	while (*npp) {
		if (*npp == deleteMe) {
			/* npp points to head pointer (if deleteMe is first element) or to next pointer within preceding element */
			*npp = deleteMe->next;
			free(deleteMe);
			return true;
		}
		/* Iterating for the next list element */
		npp = &((*npp)->next);
	}
	/* deleteMe not found */
	return false;
}


/----------------------------------------------
/----------------------------------------------

- **Example** : Deleting all list elements
  - Performing deletions raises another issue in languages without garbage collection, like C or C++. 
  - Do you advance the pointer first or free the element first? 
    - If you advance the pointer first, then the freeing is impossible because you overwrote the pointer to the element to be freed. 
	- If you free the element first, advancing the pointer is impossible, because it involves reading the next pointer in the element that was just freed.
	- The solution is to use two pointers !!!


void IntElement::deleteList(IntElement** head)
{
	// First pointer points the first element of list
	IntElement* deleteMe = *head;

	while (deleteMe) {
		// Second pointer points the next element of the element which will be deleted
		IntElement* next = deleteMe->next;
		// delete the element
		free(deleteMe);
		deleteMe = next;
	}
	*head = nullptr;
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Singly LÝnked List Implementation (not using templates)
  - Client Code shall be written !!!

#include <iostream>
#include <array>

// A singly linked list in C++
class IntElement {
public:
	IntElement(const int &value) :next{ nullptr }, data{ value }{}
	~IntElement() {}

	// getter functions
	IntElement* getNext()const { return next; }
	const int& getData()const { return data; }

	// setter functions
	void setNext(IntElement* ptr) { next = ptr; }
	void setData(const int& value) { data = value; }

	// other linked list functions
	IntElement* insertInFront(IntElement** head, int data);
	IntElement* find(IntElement* head, int data);
	bool deleteElement(IntElement** head, IntElement* deleteMe);
	bool deleteElement_I(IntElement** head, IntElement* deleteMe);
	void deleteList(IntElement** head);

	//operator overloading function ???
	//std::ostream& operator<<(std::ostream& str, IntElement* ptr);

private:
	IntElement* next;
	int data;
};

IntElement* IntElement::insertInFront(IntElement** head, int data) {
	IntElement* newElem =new IntElement(data);
	if (!newElem)
		return nullptr;
	newElem->data = data;
	newElem->next = *head;  // The correct version passes in a pointer to the head pointer
	*head = newElem;
	return newElem;
}

IntElement* IntElement::find(IntElement* head, int data) {
	IntElement* elem = head;
	while (elem != nullptr && elem->getData() != data) {
		elem = elem->getNext();
	}
	return elem;
}

bool IntElement::deleteElement(IntElement** npp, IntElement* deleteMe) {

	IntElement* elem;

	if (!npp || !*npp || !deleteMe) /* Check for null pointers */
		return false;

	while (*npp) {
		if (*npp == deleteMe) {
			/* npp points to head pointer (if deleteMe is first element) or to next pointer within preceding element */
			*npp = deleteMe->next;
			free(deleteMe);
			return true;
		}
		/* Iterating for the next list element */
		npp = &((*npp)->next);
	}
	/* deleteMe not found */
	return false;
}

void IntElement::deleteList(IntElement** head)
{
	// First pointer points the first element of list
	IntElement* deleteMe = *head;

	while (deleteMe) {
		// Second pointer points the next element of the element which will be deleted
		IntElement* next = deleteMe->next;
		// delete the element
		free(deleteMe);
		deleteMe = next;
	}
	*head = nullptr;
}

int main()
{
	IntElement ilist(0);
	//ilist.insertInFront(&ilist.getNext(), ilist.getData());
	//IntElement *ptr = ilist.find(ilist.getNext(), 6);
	//std::cout << *ptr << "\n";
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Stack Implementation (TO BE COMPLETED)
  - The createStack function sets the stack pointer to NULL and returns success
  - The push function allocates the new element, checks for failure, sets the data of the new element, places it at the top of the stack, and adjusts the stack pointer.
  - The pop operation checks that the stack isn’t empty, fetches the data from the top element, adjusts the stack pointer, and frees the element that is no longer on the stack. 
  - Although deleteStack could call pop repeatedly, it’s more efficient to simply traverse the data structure, freeing as you go. Don’t forget that you need a temporary pointer to hold the address of the next element while you free the current one.
  - The createStack and deleteStack functions become the constructor and destructor, respectively.
  - A more complete C++ implementation should include a copy constructor and assignment operator, because the default versions created by the compiler could lead to multiple deletes of the same Element due to inadvertent sharing of elements between copies of a Stack.



/----------------------------------------------
/----------------------------------------------

## TREES and GRAPHS

- A tree is made up of nodes (data elements) with zero, one, or several references (or pointers) to other nodes. Each node has only one other node referencing it.
- In object-oriented languages you usually define a class for the common parts of a node and one or more subclasses for the data held by a node.

## Binary Tree



/----------------------------------------------
/----------------------------------------------

- **Example**: Binary Search Tree / Searching an element with class and class member function

#include <iostream>
#include <array>

// Binary Tree
class Node {
public:

	Node(int v) : left{ nullptr }, right{ nullptr }, value{v}{}
	
	//getter functions
	Node* getLeft() const { return left; }
	Node* getRight() const { return right; }
	int getValue() const { return value; }

	// setter functions
	void setLeft(Node* left) { this->left = left; }
	void setRight(Node* right) { this->right = right; }
	
	// tree functions
	Node* findNode(Node* root, int value);
	Node* findNode_rcrsv(Node* root, int value);

private:
	Node* left;
	Node* right;
	int value;
};

// Searching an element in a binary search tree
Node* Node::findNode(Node* root, int value) {
    // This process continues until you reach a null reference (the end of a tree)
	while (root != nullptr) {
		int curVal = root->getValue();
		if (curVal == value) break;
		if (curVal < value) {
			root = root->getRight();
		}
		else { // curVal > value
			root = root->getLeft();
		}
	}
	return root;
}

// Searching an element in a binary search tree with a recursive function
Node* Node::findNode_rcrsv(Node* root, int value) {
	if (root == nullptr) return nullptr;
	int curVal = root->getValue();
	if (curVal == value) return root;
	if (curVal < value) { 
		return findNode_rcrsv(root->getRight(), value);	
	}
	else { // curVal > value
		return findNode_rcrsv(root->getLeft(), value);
	}

}


int main()
{
	// Making a binary search tree with available values
	Node* root = new Node(5);
	Node* left = new Node(3);
	Node* right = new Node(10);

	root->setLeft(left);
	root->setRight(right);

	Node* left_left = new Node(1);
	Node* left_right = new Node(4);

	left->setLeft(left_left);
	left->setRight(left_right);

	Node* right_left = new Node(7);
	Node* right_right = new Node(12);

	right->setLeft(right_left);
	right->setRight(right_right);

	Node* searched = root->findNode(root, 7);
	std::cout << "value address: " << searched << "\n"; // value address: 0170F028
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Binary Search Tree / Searching an element with structure and recursion function

#include <iostream>

// Binary Tree
struct node
{
	int data;
	struct node* left;
	struct node* right;
	node(int value) {
		data = value;
		left = nullptr;
		right = nullptr;
	}
};

// Searching an element in binary search tree with recursion function
node* search(node* root, int key)
{
	// Base Cases: root is null or key is present at root data
	if (root == NULL || root->data == key)
		return root;

	// Key is greater than root's data 
	if (root->data < key)
		return search(root->right, key);

	// Key is smaller than root's data 
	return search(root->left, key);
}

int main()
{
	// Making a binary search tree with available values
	node* root = new node(5);
	root->left = new node(3);
	root->right = new node(10);
	root->left->left = new node(1);
	root->left->right = new node(4);
	root->right->left = new node(7);
	root->right->right = new node(12);

	node* searched = search(root, 7);
	std::cout << "value address: " << searched << "\n"; // value address: 00D621C8

}

/----------------------------------------------
/----------------------------------------------


## OBJECT ORIENTED PROGRAMMING (OOP)

- **Class** : A class is an abstract definition of something that has data members and member class functions. 

- **Interface** : The public class member functions provide an interface that is the only access to the data structures contained in the class.

- **Constructor** : Creating an object is called constructing the object. Part of the process involves invoking a "constructor" in the class. The constructor initializes the state of the object. 

- **Destructor** :  In C++ a member function called the destructor is invoked to clean up an object’s state.

- **Inheritance** : It allows a class to be defined as a modified or more specialized version of another class.

- **Polymorphism** : A core concept of OOP, enabled by overriding, is runtime selection of which definition of a class member function should be executed based on the class of the object.

/----------------------------------------------
/----------------------------------------------

- **Example** : Class Implementation 
  - A class definition for Point, which is a pair of integers that represents the x and y values of a point in a Cartesian coordinate plane:

#include <iostream>
#include <string>

class Point {
public:
	Point() = default;
	Point(int x, int y) :mx{ x }, my{ y } {}
	Point(const Point& other) {
		std::cout << "Copy constructor called " << "\n";
		mx = other.getX();
		my = other.getY();
	}

	Point& operator= (const Point& point) {
		std::cout << "Assignment operator called " << "\n";
		return *this;
	}
	
	// getter functions
	int getX() const { return mx; }
	int getY() const { return my; }

	//setter functions
	void setX(const int& x) { this->mx = x; }
	void setY(const int& y) { this->my = y; }

	// other functions
	Point* relativeTo(int dx, int dy) {
		return new Point(mx + dx, my + dy);
	}

	std::string toString() {
		std::string str;
		str.push_back('(');
		str.push_back(mx);
		str.push_back(',');
		str.push_back((char)my);
		str.push_back(')');
		return str;
	}

private:
	int mx, my;

};

int main()
{
	Point cartesian(10, 20);
	std::cout << "mx : " << cartesian.getX() << "\n"; // mx : 10
	std::cout << "my : " << cartesian.getY() << "\n"; // my : 20

	Point* ptr = new Point(30, 40);
	std::cout << "mx : " << ptr->getX() << "\n"; // mx : 30
	std::cout << "my : " << ptr->getY() << "\n"; // my : 40

	Point* p1 = cartesian.relativeTo(5, -5);
	std::cout << "p1 : " << p1->toString() << "\n"; // NOT OK !!! To Be Controlled !!!
}

/----------------------------------------------
/----------------------------------------------

- **Example** : Object Oriented Programming (Inheritance, Virtual Functions)
  - A shapes library representing the different shapes in a vector-based drawing application.
  - At the top of the hierarchy is the "Shape" class, which defines the things that all shapes have in common
  - You can then specialize the shapes into "Rectangle" and "Ellipse" subclasses.
  - The Rectangle and Ellipse classes could be further specialized into "Square" and "Circle" subclasses.
  - Adding a new shape to the library shall be just a matter of subclassing one of the existing classes and implementing the things that are different.

#include <iostream>
#include <string>

class Point {
public:
	Point() = default;
	Point(int x, int y) :mx{ x }, my{ y } {}
	Point(const Point& other) {
		std::cout << "Copy constructor called " << "\n";
		mx = other.getX();
		my = other.getY();
	}

	Point& operator= (const Point& point) {
		std::cout << "Assignment operator called " << "\n";
		return *this;
	}

	// getter functions
	int getX() const { return mx; }
	int getY() const { return my; }

	//setter functions
	void setX(const int& x) { this->mx = x; }
	void setY(const int& y) { this->my = y; }

	// other functions
	Point* relativeTo(int dx, int dy) {
		return new Point(mx + dx, my + dy);
	}
private:
	int mx{ 0 }, my{ 0 };

};

class Rectangle;
class Graphics {};

class Shape {
public:

	Point getCenter() const { return center; }
	virtual Rectangle getBounds();
	virtual void draw(Graphics g);
protected:
	Point center;
	Shape() {
		this->center.setX(0);
		this->center.setY(0);
	}
	Shape(Point center) { this->center = center; }

};

class Rectangle : public Shape {
public:
	Rectangle() :height{ 0 }, width{ 0 } {}
	Rectangle(Point center, int h, int w) {
		this->center = center;
		height = h;
		width = w;
	}
	Rectangle getBounds() override {
		return *this;
	}
	void draw(Graphics g) override {
		// code to paint rectangle
	}
	int getHeight() const { return height; }
	int getWidth() const { return width; }

private:
	int height{ 0 };
	int width{ 0 };
};

class Ellipse : public Shape {
public:
	Ellipse() :horizontalAxis{ 0 }, verticalAxis{ 0 }{}
	Ellipse(Point center, int h, int v) {
		this->center = center;
		horizontalAxis = h;
		verticalAxis = v;
	}

	Rectangle getBounds() override {
		Rectangle* ptr = new Rectangle(center, horizontalAxis * 2, verticalAxis * 2);
		return (*ptr);
	}
	void draw(Graphics g) override {
		// code to paint ellipse
	}

	int getHorizontalAxis()const { return horizontalAxis; }
	int getVerticalAxis() const { return verticalAxis; }

private:
	int horizontalAxis{ 0 };
	int verticalAxis{ 0 };
};

int main()
{
	Shape* shape;
	Point* point_ptr = new Point(10, 20);
	Ellipse* ellipse_ptr = new Ellipse(*point_ptr, 30, 40);
	Rectangle* rectangle_ptr = new Rectangle(*point_ptr, 50, 60);

	std::cout << "rectangle : " << rectangle_ptr->getHeight() << " " << rectangle_ptr->getWidth() << "\n";
	std::cout << "ellipse : " << ellipse_ptr->getHorizontalAxis() << " " << ellipse_ptr->getVerticalAxis() << "\n";
}

// Error	LNK2001	unresolved external symbol "public: virtual class Rectangle __thiscall Shape::getBounds(void)" 
// Error	LNK2001	unresolved external symbol "public: virtual void __thiscall Shape::draw(class Graphics)" 


/----------------------------------------------
/----------------------------------------------

- **Example** : Interfaces && Abstract Classes 
  - An interface declares a set of related member functions, outside of any class.
    - An interface is equivalent to an abstract class with no data members and no method definitions.
	- In C++ an interface is defined by declaring a class with no data members and only pure virtual functions.
	- Supporting both interfaces and abstract classes are the provision of a default implementation of an interface via an abstract class.
  - An abstract class is an incomplete class definition that declares but does not define all its methods.
  - Abstract classes cannot be instantiated. Only the instances of concrete subclasses can be created.
  - In general, abstract classes are useful when the classes derived from them are more specific types of the base class (is-a relationship), particularly when there’s some shared functionality in the abstract base class that derived classes can use.

class StatusCallback {
public:
	virtual void updateStatus(int oState, int nState) = 0;
};

class MyClass : StatusCallback {
public:
	void updateStatus(int oState, int nState) override {
		if (nState > oState) {
			// code...
		}
	}
	// remainder of class
};

/----------------------------------------------
/----------------------------------------------

## VIRTUAL FUNCTIONS

- In OOP, child classes can override (redefine) methods defined by base classes. 

- Functions declared final cannot be overridden.

- In C++, functions are only virtual when declared with the virtual keyword—nonvirtual methods are the default.

- If the functon is not virtual, the function definition invoked is determined at compile time based on the type of the reference (or pointer).

- Virtual functions are used for polymorphism.

- One special type of virtual function in C++ is a pure virtual method: a function declared but explicitly not defined.

- Any class that contains a pure virtual function or inherits one without redefining it is an abstract class.

- It almost always takes longer to invoke a virtual function because the address of the appropriate function definition must be looked up in a table before it is invoked. This table also requires a small amount of extra memory. In most applications, the overhead associated with virtual functions is so small as to be negligible. 


- **Example** : In the case of using non-virtual member functions 

#include <iostream>
#include <string>

class A {
public:
	void print() { std::cout << "A"; }
};

class B : A {
public:
	void print() { std::cout << "B"; }
};

class C : B {
public:
	void print() { std::cout << "C"; }
};

int main()
{
	A* aptr = new A();
	B* bptr = new B();
	C* cptr = new C();

	aptr->print(); // A
	bptr->print(); // B
	cptr->print(); // c

	// Because print is not virtual, the method invoked depends on the type used at compile time :
	((B*)cptr)->print(); // B
	((A*)cptr)->print(); // A
	((A*)bptr)->print(); // A

}

/----------------------------------------------
/----------------------------------------------

- **Example** : In the case of using virtual member functions 

#include <iostream>
#include <string>

class A {
public:
	virtual void print() { std::cout << "A"; }
};

class B : A {
public:
	virtual void print() { std::cout << "B"; }
};

class C : B {
public:
	virtual void print() { std::cout << "C"; }
};

int main()
{
	A* aptr = new A();
	B* bptr = new B();
	C* cptr = new C();

	aptr->print(); // A
	bptr->print(); // B
	cptr->print(); // c

	// The runtime type of the object determines which function definition is invoked : 
	((B*)cptr)->print(); // C
	((A*)cptr)->print(); // C
	((A*)bptr)->print(); // B

}

/----------------------------------------------
/----------------------------------------------

## MULTIPLE INHERITANCE: 
- In C++ a class can inherit (directly or indirectly) from more than one class, which is referred to as multiple inheritance. In C# and Java limit classes to single inheritance—each class inherits from a single parent class.

- Multiple inheritance is a useful way to create classes that combine aspects of two disparate class hierarchies.  If two frameworks define their own base classes for exceptions, you can use multiple inheritance to create exception classes that can be used with either framework.

- The complexities exist with multiple inheritance:
  - The problem with multiple inheritance is that it can lead to "ambiguity". 
  - The order in which the base classes are initialized when a derived object is constructed
  - The way members can be inadvertently hidden from derived classes.


- **Example** : The example is when a class inherits from two other classes, each of which inherits from the same class
/----------------------------------------------

class A {
protected:
	bool flag;
};
class B : public A {};
class C : public A {};
class D : public B, public C {
public:
	void setFlag(bool nflag) {
		flag = nflag; // Error: D::flag is ambiguous
		// The flag data member is defined by class A. 
		// But class D descends from class B and class C, which both derive from A. 
		// So in essence two copies of flag are available because two instances of A are in D’s class hierarchy.
		// Which one do you want to set ?
	}
};

/----------------------------------------------

- **Solution-1** : To specify which class data member is used with scope resolution operator --> B::flag = nflag; 
- **Solution-2** : To specify class A as virtual base classes to have only one A class object 

class A {
protected:
	bool flag;
};
class B : virtual public A {};
class C : virtual public A {};
class D : public B, public C {
public:
	void setFlag(bool nflag) {
		flag = nflag; 
	}
};

/----------------------------------------------
/----------------------------------------------

## RESOURCE MANAGEMENT 
- In C++, whenever you exit a function, whether by a return statement or because of an exception, all of the automatic (local) objects that pass out of scope are destroyed. How might you use this to ensure that you avoid leaking resources?

- You can create a class to wrap the resource. If you call openResource in the constructor and closeResource in the destructor, you can use the life cycle of the object to manage the resource. All you have to do is remember to declare the object as a local object on the stack so that it will be automatically destroyed (static object mi olmalý?).

- A violation of this case: If an instance of the wrapper class were copied, then both objects would wrap the same resource handle, and each object would try to release the handle when the object was destroyed. One way to guard against this is to declare private copy constructor and assignment operators to prevent the object from being duplicated.

- The C++ approach represents all of the necessary logic in one place in the wrapper class, so there’s no duplication and the code that uses the resource is simple and clean.

- The pattern embodied by this C++ approach is commonly called Resource Acquisition Is Initialization (RAII), and is the preferred way to manage resources in C++. RAII relies on deterministic, immediate destruction of automatic objects when they go out of scope, which ensures that resources are released as soon as they’re no longer accessible through their wrapper objects.

- C# and Java provides try/finally functionality for resource management, but lacks the ability to do true RAII because it does not have deterministic destruction of automatic objects. (Java 1.7 added try-with-resources that is more limited than RAII in C++)

- **Example** : Resource Management (Pseudo Code)
  - Suppose you have a function that needs to access a limited system resource. 
  - The code must call an API function openResource to obtain a handle to the resource, and must pass this handle to a function closeResource when it’s done. 
  - How can you ensure that closeResource will be called in all cases and the resource will never be leaked?

class Resource {
public:
	Resource() { handle = openResource(); } // memory is allocated in constructor 
	~Resource() { closeResource(handle); }  // memory is deallocated in ddestructor by destroying object 
	ResourceHandle getHandle() { return handle; }

private:
	ResourceHandle handle;
	Resource(Resource const&);             // private copy constructor as a guard (why isnt it deleted?) 
	Resource& operator= (Resource const&); // private assignment operator as a guard (why isnt it deleted?)
};

void useResource() {
	Resource r; 
	/* Use resource here */
}

/----------------------------------------------
/----------------------------------------------

## DESIGN PATTERNS: 
- Design patterns are guidelines for identifying and solving common design problems in object-oriented programming.

- There are 23 fundamental design patterns. These patterns are grouped into three basic categories: creational, behavioral, and structural.

- The main reason is that they provide best practices solutions to common software design problems based on the collected wisdom of many programmers.

- The second reason is that design patterns provide a concise vocabulary for discussing design problems and their solutions. 

- The wrong design pattern can add unnecessary complexity to an application, and an incorrect or inefficient implementation of a pattern can introduce bugs or compromise performance.

- Some work has also been done to identify patterns that should not be used. These “anti-patterns” are common pitfalls or improper practices that lead to inefficient, ineffective, difficult-to-understand, or difficult-to-maintain code.

/----------------------------------------------
/----------------------------------------------

## Singleton Pattern: 
- The Singleton pattern ensures that at most one instance of a class exists at any given time.

- An application cannot create new instances—all methods are accessed through the singleton. The application obtains the singleton by invoking a “static function” exposed by the class.

- Singletons are also sometimes used as a substitute for global variables. Many people consider using singletons to store global data as an anti-pattern.

- Why is a singleton better than a set of static methods?
  - Inheritance and interfaces. Singletons are objects. They can inherit from base classes and implement interfaces.
  - Possible multiplicity. You can change your mind and create multiple objects (for example, one per thread) without changing a lot of code.
  - Dynamic binding. The actual class used to create the singleton can be determined at run time, not at compile time.

- The disadvantages of implementing singleton design pattern? 
  - A singleton may slow the application’s startup time as it initializes
  - It may hold onto resources longer than necessary, because normally a singleton isn’t destroyed until the application ends.


- **Example** : Singleton Pattern 
  - Using a logging class to write debugging messages to the console. 
  - How would you implement this logging facility using the Singleton pattern?

/----------------------------------------------
/----------------------------------------------

## KNOWLEDGE-BASED C++:

/----------------------------------------------
/----------------------------------------------
 
## Macros and Inline Functions 
- Unlike macros, inline functions are handled by the compiler directly. From the compiler’s perspective, when it encounters a call to an inline function, it writes a copy of the compiled function definition instead of generating a function call
- You must specify the argument and return types for an inline function, which is not necessary (or possible) for the macro.
- A templated inline function would avoid the need to write a separate definition for each argument type, at the expense of increased complexity.
- Both inline functions and macros provide a way to eliminate function call overhead at the expense of program size.
- Macros can create bugs due to the unexpected behavior of text replacement semantics.
- When macros are used, the code that is compiled is not visible in the source. This makes debugging macro-related problems particularly difficult.

Macro definition: 
#define TRIPLE(x) 3 * x

Inline function equivalent for the same definition: 
inline int Triple(int x) { return 3 * x; }

- **Example** : Unexpected result with using macro (changing value for each calling in macro)

int main()
{
	#define CUBE(x) x * x * x
	int foo, bar = 2;
	foo = CUBE(++bar);  // The expectaton is --> foo = ++bar * ++bar * ++bar; and foo : 27

	std::cout << "foo : " << foo << "\n"; // foo : 125
	std::cout << "bar : " << bar << "\n"; // bar : 5 (incremented each calling from macro)
}

- **Example** : Unexpected result with using macro (if condition scope)

int main()
{
	#define INCREMENT_BOTH(x, y) x++; y++
	int foo=3, bar = 2;
	bool flag = true;

 	if (flag)
		INCREMENT_BOTH(foo, bar); // The expection --> if (flag) {	foo++;	bar++;}

	std::cout << "foo : " << foo << "\n"; // foo : 4 (it is changed and in if condition scope)
	std::cout << "bar : " << bar << "\n"; // bar : 3 (not changed, it is out of if condition scope)

	// After using function scope 
	if (flag) {
		INCREMENT_BOTH(foo, bar); 
	}

	std::cout << "foo : " << foo << "\n"; // foo : 5
	std::cout << "bar : " << bar << "\n"; // bar : 4 (it is also changed, it is in if condition scope)
}

/----------------------------------------------
/----------------------------------------------

## Linkedin Questions: C++ Code Snipets

/----------------------------------------------
/----------------------------------------------

char c = 255;
if (c > 10)
	printf("c = %i is greater than 10.", c); // c = -1 is less than 10. 
else
	printf("c = %i is less than 10.", c);

/----------------------------------------------
/----------------------------------------------

int x = 5, y = 2; // x = 0101 and y = 0010 
if (x & y)
	printf("x&y is run"); 
else 
	printf("x&y is not run"); // x&y = 0101 & 0010 = 0000 (false)

/----------------------------------------------
/----------------------------------------------

printf("1/2 : %f", (float)(1 / 2)); // 1/2 : 0.000000
printf("1/2 : %f", (float)1 / 2);   // 1/2 : 0.500000
printf("1/2 : %f", 1 / (float)2);   // 1/2 : 0.500000

/----------------------------------------------
/----------------------------------------------

int8_t a = 200;
std::cout << "a : " << a << "\n"; // a : not readable
uint8_t b = 100;
std::cout << "b : " << b << "\n"; // b : d

if (a > b)
	std::cout << "a is greater than b"<< "\n";
else
	std::cout << "a is less than b" << "\n"; // OK

int8_t a2 = 200;
uint8_t b2 = 100;
if ((uint8_t)a2 > b2)
	std::cout << "a2 is greater than b2" << "\n"; // OK
else
	std::cout << "a2 is less than b2" << "\n";

/----------------------------------------------
/----------------------------------------------

What is the mean of --> void *ptr ?
- A void* does not mean anything. It is a pointer, but the type that it points to is not known.
- void is used as a keyword. The void pointer, also known as the generic pointer, is a special type of pointer that can be pointed at objects of any data type! 
- It's not that it can return "anything". 
- However, because the void pointer does not know what type of object it is pointing to, it can not be dereferenced! Rather, the void pointer must first be explicitly cast to another pointer type before it is dereferenced.

- **Example** : void *ptr 
int main()
{
	int nValue = 5;
	float fValue;

	struct Something
	{
		int nValue;
		float fValue;
	};

	Something sValue;

	void* pVoid;
	pVoid = &fValue; // valid
	pVoid = &sValue; // valid
	pVoid = &nValue; // valid

	// can not dereference pVoid because it is a void pointer
	int* pInt = static_cast<int*>(pVoid); // cast from void* to int*
	std::cout << *pInt << "\n"; // can dereference pInt : 5
}

/----------------------------------------------
/----------------------------------------------







