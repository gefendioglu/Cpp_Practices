/----------------------------------------------
/----------------------------------------------

- **Example**: 
  - Write a program that prints the numbers from 1 to 100. 
  - If a number is divisible by 3, print “Fizz” instead of the number, 
  - If a number is divisible by 5, print “Buzz” instead of the number, 
  - If a number is divisible by both 3 and 5, print “FizzBuzz” instead of the number.

#include <iostream>

int main()
{
    for (int i = 1; i <= 100; ++i) {
        bool divByThree = (i % 3 == 0);
        bool divByFive = (i % 5 == 0);
        if (divByThree && divByFive) {
            std::cout << "FizzBuzz" << "\n";
        }
        else if (divByThree) {
            std::cout << "Fizz" << "\n";
        }
        else if (divByFive) {
            std::cout << "Buzz" << "\n";
        }
        else {
            std::cout << i << "\n";
        }
    }
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Write a function that reverses a string without using any library functions.

#include <iostream>
#include <string>

std::string reverse(std::string& str) {
	std::string out = "";
	for (size_t i = str.length() - 1; i >= 0; --i)
		out += str.at(i);
	return out;
}

int main()
{
	std::string str = "Gamze Efendioglu";
	reverse(str);
}

/----------------------------------------------
/----------------------------------------------

- **Example**:
  - Given an unsorted list of integers, write a function that returns a new list with all duplicate values removed.

#include <iostream>
#include <list>

std::list<int> removeDuplicates(const std::list<int>& in) {
	std::list<int> out;
	for (auto ival : in) {
		bool found = false;
		for (auto oval : out) {
			if (ival == oval) {
				found = true;
				break;
			}
		}
		if (!found) 
			out.push_back(ival);
	}
	return out;
}

int main()
{
	std::list<int> ilist{ 1, 5, 6, 8, 9, 4, 5, 6, 7, 9, 1, 2, 5 };
	std::cout << "old list : "; 
	for (auto i : ilist)
		std::cout << i << " ";

	std::cout << "\n\n";

	std::list<int> new_list = removeDuplicates(ilist);
	std::cout << "new list : ";
	for (auto i : new_list)
		std::cout << i << " "; // not the same sequence 

	std::cout << "\n\n";
}

/----------------------------------------------
/----------------------------------------------

- **Example**: 
  - The same problem can be solved by converting the list to a set, which doesn’t allow duplicated values. Sets don’t preserve the original ordering of their data (as the problem statement doesn’t require that ordering be preserved).

#include <iostream>
#include <list>
#include <unordered_set>

std::list<int> removeDuplicates(const std::list<int>& in) {
	std::unordered_set<int> s(in.begin(), in.end());
	std::list<int> out(s.begin(), s.end());
	return out;
}

int main()
{
	std::list<int> ilist{ 1, 5, 6, 8, 9, 4, 5, 6, 7, 9, 1, 2, 5 };
	std::cout << "old list : "; 
	for (auto i : ilist)
		std::cout << i << " ";

	std::cout << "\n\n";

	std::list<int> new_list = removeDuplicates(ilist);
	std::cout << "new list : ";
	for (auto i : new_list)
		std::cout << i << " "; // not the same sequence 

	std::cout << "\n\n";
}

/----------------------------------------------
/----------------------------------------------

- **Example**: TO BE COMPLETED
  - You are given a string that contains left and right parenthesis characters.
  - Write code to determine whether the parentheses are correctly nested. 
  - For example, the strings "(())" and "()()" are correctly nested but "(()()" and ")(" are not.

- **Solution**:
  - There will be an equal number of left and right parentheses (counting problem)
  - Using a single variable that tracks the relative number of left and right parentheses.
  - Increment a counter when you see a left parenthesis, and decrement it when you see a right parenthesis.
  - If at the end the counter is nonzero, you know you don’t have a properly nested string.
  - For the final case ")(" the final counter value would be zero, so you would erroneously conclude that the nesting was correct.
  - It’s not sufficient for there to be merely the same number of right and left parentheses; every right parenthesis has to come after a left parenthesis that it’s paired with.
  - Put in terms of the counter that you’re using, it’s not sufficient for it to end at zero; it also has to never be negative.
  - The counter can only become negative after it’s decremented, so you can just check immediately following the decrement.


#include <iostream>
#include <list>
#include <set>

bool checkNesting(std::string str) {
	int count = 0;
	for (int i = 0; i < str.length(); ++i) {
		char ch = str.at(i);
		if (ch == '(') {
			++count;
		}
		else if (ch == ')') {
			--count;
			if (count < 0)
				return false;
		}
	}
	return count == 0;
}

int main()
{
	std::string str_test1 = "(())";
	std::string str_test2 = "()()";
	std::string str_test3 = "(()()";
	std::string str_test4 = ")(";

	std::set<std::string> str_test{ str_test1 ,str_test2, str_test3, str_test4 };
	for (const auto& i : str_test) {
		if (checkNesting(str_test.))
			std::cout << "True";
	}
}

/----------------------------------------------
/----------------------------------------------

- **Example**: The size of classes

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Foo {
    double a;
    bool b;  
};

int main()
{
    std::cout << "sizeof(double): " << sizeof(double) << '\n'; // 8 
    std::cout << "sizeof(bool): " << sizeof(bool) << '\n';     // 1 
    std::cout << "sizeof(Foo) : " << sizeof(Foo) << '\n';      // 16  
}

/----------------------------------------------
/----------------------------------------------

- **Example**: The size of pointers, arrays, vectors, strings, chars 

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 
#include <vector>

int main()
{
    std::vector<double> v(100);
    std::vector<double>* ptov = &v;
    
    char c = 'x';
    char* ptochar = &c;
   
    double d = 1.0;
    double* ptodouble = &d;
    
    std::string s{ "Lorem ipsum dolor sit amet, vis id quis invenire imperdiet" };
    std::string* ptostring = &s;
    
    std::cout << "         sizeof(v): " << sizeof(v) << "\n";
    std::cout << "      sizeof(ptov): " << sizeof(ptov) << "\n";
    std::cout << "     sizeof(*ptov): " << sizeof(*ptov) << "\n";
    std::cout << "         sizeof(c): " << sizeof(c) << "\n";
    std::cout << "   sizeof(ptochar): " << sizeof(ptochar) << "\n";
    std::cout << "  sizeof(*ptochar): " << sizeof(*ptochar) << "\n";
    std::cout << "         sizeof(d): " << sizeof(d) << "\n";
    std::cout << " sizeof(ptodouble): " << sizeof(ptodouble) << "\n";
    std::cout << "sizeof(*ptodouble): " << sizeof(*ptodouble) << "\n";
    std::cout << "         sizeof(s): " << sizeof(s) << "\n";
    std::cout << " sizeof(ptostring): " << sizeof(ptostring) << "\n";
    std::cout << "sizeof(*ptostring): " << sizeof(*ptostring) << "\n";
    
    int arr[5]{};
    int* p = arr;
    int(*ptr)[5] = &arr;

    // On my machine int is 4 bytes and pointers are 8 bytes:
    std::cout << "  sizeof(arr): " << (sizeof(arr)) << "\n";
    std::cout << "  sizeof(p)  : " << (sizeof(p)) << "\n";
    std::cout << " sizeof(*p)  : " << (sizeof(*p)) << "\n";
    std::cout << "  sizeof(ptr): " << (sizeof(ptr)) << "\n";
    std::cout << " sizeof(*ptr): " << (sizeof(*ptr)) << "\n";
    return 0;
}

/----------------------------------------------
/----------------------------------------------

## BIG O ANALYSIS : 
- The general procedure for Big-O runtime analysis is as follows:
  1. Figure out what the input is and what n represents.
  2. Express the number of operations the algorithm performs in terms of n.
  3. Eliminate all but the highest-order terms.
  4. Remove all constant factors

- Which Algorithm Is Better? (From the best to the worst) 
  - O(1) : The fastest running time (constant running time)
  - O(log n) : A logarithmic running time if it increases logarithmically in proportion to the input size.
  - O(n) : A linear algorithm’s running time increases in direct proportion to the input size.
  - O(n log n) : A quasilinear algorithm is midway between a linear algorithm and a polynomial algorithm.
  - O(nc) : A polynomial algorithm grows quickly based on the size of the input.
  - O(cn) : An exponential algorithm grows even faster than a polynomial algorithm.
  - O(n!) : A factorial algorithm grows the fastest and becomes quickly unusable for even small values of n.
  - Algorithms that run in constant-O(1), logarithmic-O(log n), linear-O(n) , or quasilinear-O(n log n) time are preferred !!!

/----------------------------------------------
/----------------------------------------------

- **Example**: Big O Analysis
  - Consider a simple function that returns the maximum value stored in an array of nonnegative integers. The size of the array is n.
  - What are the complexities of CompareToMax and CompareToAll functions?
  - In CompareToMax, each array element was compared once to a maximum value. Thus, the input items are each examined once, resulting in n examinations. --> O(n)
  - In CompareToMax, the best-case, average-case, and worst-case running times are identical. Regardless of the arrangement of the values in the array, the algorithm is always O(n).

  - In CompareToAll, this function may compare each of n elements to n other elements. Thus you have nxn examinations, so this is an O(n^2) algorithm.
  - The analysis of CompareToAll 
    - a worst-case scenario: the maximum value was at the end of the array ---> O(n^2)
	- an average case scenario: the largest value is in the middle
	  - checking n(n/2) = n^2/2 times --> O(n^2/2) running time
	  - the average case for CompareToAll is no better than the worst case ---> O(n^2)
	- a best-case scenario: the maximum value is at the beginning of the array
	  - The maximum value is compared to all other values only once --> O(n) 
  - As the array grows, the number of comparisons in CompareToAll becomes much larger than in CompareToMax

  - There is a check in CompareToMax to ensure that the array is not empty and a step that initializes the curMax variable. It may seem more accurate to call this an O(n + 2) function to reflect these extra operations. As n approaches infinity, the difference between n and n + 2 is insignificant, so the constant term can be ignored.
  - Similarly, for an algorithm running in n + n^2 time, the difference between n^2 and n + n^2 is negligible for a very large n.
  - In Big-O analysis you eliminate all but the highest-order term.

#include <iostream>
#include <array>

// Returns the largest value in an array of n non-negative integers 
int CompareToMax(int array[], int n) {
	int curMax, i;

	// Make sure that there is at least one element in the array.
	if (n <= 0)
		return -1;

	// Set the largest number so far to the first array value.
	curMax = array[0];

	// Compare every number with the largest number so far. 
	for (i = 1; i < n; i++) {
		if (array[i] > curMax) {
			curMax = array[i];
		}
	}
	return curMax;
}

int CompareToAll(int array[], int n) {

	int i, j;
	bool isMaxValue;

	// Make sure that there is at least one element in the array.
	if (n <= 0)
		return -1;

	for (i = 0; i < n; ++i)
	{
		isMaxValue = true;
		for (j = 0; j < n; ++j)
		{
			// See if any value is greater.
			if (array[j] > array[i]) {
				isMaxValue = false; // array[i] is not the largest value.
				break;
			}
		}
		// If isMaxValue is true, no larger value exists; array[i] is max.
		if (isMaxValue)
			break;
	}
	return array[i];
}

int main()
{
	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };
	std::cout << "max value : " << CompareToAll(arr, sizeof(arr) / sizeof(&arr[0])) << "\n";

	std::cout << "max value : " << CompareToMax(arr, sizeof(arr) / sizeof(&arr[0])) << "\n";
	// max value : 9
}
/----------------------------------------------
/----------------------------------------------

## RESOURCE MANAGEMENT 
- In C++, whenever you exit a function, whether by a return statement or because of an exception, all of the automatic (local) objects that pass out of scope are destroyed. How might you use this to ensure that you avoid leaking resources?

- You can create a class to wrap the resource. If you call openResource in the constructor and closeResource in the destructor, you can use the life cycle of the object to manage the resource. All you have to do is remember to declare the object as a local object on the stack so that it will be automatically destroyed (static object mi olmalý?).

- A violation of this case: If an instance of the wrapper class were copied, then both objects would wrap the same resource handle, and each object would try to release the handle when the object was destroyed. One way to guard against this is to declare private copy constructor and assignment operators to prevent the object from being duplicated.

- The C++ approach represents all of the necessary logic in one place in the wrapper class, so there’s no duplication and the code that uses the resource is simple and clean.

- The pattern embodied by this C++ approach is commonly called Resource Acquisition Is Initialization (RAII), and is the preferred way to manage resources in C++. RAII relies on deterministic, immediate destruction of automatic objects when they go out of scope, which ensures that resources are released as soon as they’re no longer accessible through their wrapper objects.

- C# and Java provides try/finally functionality for resource management, but lacks the ability to do true RAII because it does not have deterministic destruction of automatic objects. (Java 1.7 added try-with-resources that is more limited than RAII in C++)

/----------------------------------------------
/----------------------------------------------

- **Example** : Resource Management (Pseudo Code)
  - Suppose you have a function that needs to access a limited system resource. 
  - The code must call an API function openResource to obtain a handle to the resource, and must pass this handle to a function closeResource when it’s done. 
  - How can you ensure that closeResource will be called in all cases and the resource will never be leaked?

class Resource {
public:
	Resource() { handle = openResource(); } // memory is allocated in constructor 
	~Resource() { closeResource(handle); }  // memory is deallocated in ddestructor by destroying object 
	ResourceHandle getHandle() { return handle; }

private:
	ResourceHandle handle;
	Resource(Resource const&);             // private copy constructor as a guard (why isnt it deleted?) 
	Resource& operator= (Resource const&); // private assignment operator as a guard (why isnt it deleted?)
};

void useResource() {
	Resource r; 
	/* Use resource here */
}

/----------------------------------------------
/----------------------------------------------

## KNOWLEDGE-BASED C++:

## Macros and Inline Functions 
- Unlike macros, inline functions are handled by the compiler directly. From the compiler’s perspective, when it encounters a call to an inline function, it writes a copy of the compiled function definition instead of generating a function call
- You must specify the argument and return types for an inline function, which is not necessary (or possible) for the macro.
- A templated inline function would avoid the need to write a separate definition for each argument type, at the expense of increased complexity.
- Both inline functions and macros provide a way to eliminate function call overhead at the expense of program size.
- Macros can create bugs due to the unexpected behavior of text replacement semantics.
- When macros are used, the code that is compiled is not visible in the source. This makes debugging macro-related problems particularly difficult.

Macro definition: 
#define TRIPLE(x) 3 * x

Inline function equivalent for the same definition: 
inline int Triple(int x) { return 3 * x; }

- **Example** : Unexpected result with using macro (changing value for each calling in macro)

int main()
{
	#define CUBE(x) x * x * x
	int foo, bar = 2;
	foo = CUBE(++bar);  // The expectaton is --> foo = ++bar * ++bar * ++bar; and foo : 27

	std::cout << "foo : " << foo << "\n"; // foo : 125
	std::cout << "bar : " << bar << "\n"; // bar : 5 (incremented each calling from macro)
}

- **Example** : Unexpected result with using macro (if condition scope)

int main()
{
	#define INCREMENT_BOTH(x, y) x++; y++
	int foo=3, bar = 2;
	bool flag = true;

 	if (flag)
		INCREMENT_BOTH(foo, bar); // The expection --> if (flag) {	foo++;	bar++;}

	std::cout << "foo : " << foo << "\n"; // foo : 4 (it is changed and in if condition scope)
	std::cout << "bar : " << bar << "\n"; // bar : 3 (not changed, it is out of if condition scope)

	// After using function scope 
	if (flag) {
		INCREMENT_BOTH(foo, bar); 
	}

	std::cout << "foo : " << foo << "\n"; // foo : 5
	std::cout << "bar : " << bar << "\n"; // bar : 4 (it is also changed, it is in if condition scope)
}

/----------------------------------------------
/----------------------------------------------

## Linkedin Questions: C++ Code Snipets

/----------------------------------------------
/----------------------------------------------

char c = 255;
if (c > 10)
	printf("c = %i is greater than 10.", c); // c = -1 is less than 10. 
else
	printf("c = %i is less than 10.", c);

/----------------------------------------------
/----------------------------------------------

int x = 5, y = 2; // x = 0101 and y = 0010 
if (x & y)
	printf("x&y is run"); 
else 
	printf("x&y is not run"); // x&y = 0101 & 0010 = 0000 (false)

/----------------------------------------------
/----------------------------------------------

printf("1/2 : %f", (float)(1 / 2)); // 1/2 : 0.000000
printf("1/2 : %f", (float)1 / 2);   // 1/2 : 0.500000
printf("1/2 : %f", 1 / (float)2);   // 1/2 : 0.500000

/----------------------------------------------
/----------------------------------------------

int8_t a = 200;
std::cout << "a : " << a << "\n"; // a : not readable
uint8_t b = 100;
std::cout << "b : " << b << "\n"; // b : d

if (a > b)
	std::cout << "a is greater than b"<< "\n";
else
	std::cout << "a is less than b" << "\n"; // OK

int8_t a2 = 200;
uint8_t b2 = 100;
if ((uint8_t)a2 > b2)
	std::cout << "a2 is greater than b2" << "\n"; // OK
else
	std::cout << "a2 is less than b2" << "\n";

/----------------------------------------------
/----------------------------------------------

What is the mean of --> void *ptr ?
- A void* does not mean anything. It is a pointer, but the type that it points to is not known.
- void is used as a keyword. The void pointer, also known as the generic pointer, is a special type of pointer that can be pointed at objects of any data type! 
- It's not that it can return "anything". 
- However, because the void pointer does not know what type of object it is pointing to, it can not be dereferenced! Rather, the void pointer must first be explicitly cast to another pointer type before it is dereferenced.

- **Example** : void *ptr 
int main()
{
	int nValue = 5;
	float fValue;

	struct Something
	{
		int nValue;
		float fValue;
	};

	Something sValue;

	void* pVoid;
	pVoid = &fValue; // valid
	pVoid = &sValue; // valid
	pVoid = &nValue; // valid

	// can not dereference pVoid because it is a void pointer
	int* pInt = static_cast<int*>(pVoid); // cast from void* to int*
	std::cout << *pInt << "\n"; // can dereference pInt : 5
}

/----------------------------------------------
/----------------------------------------------







