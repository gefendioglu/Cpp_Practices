
/----------------------------------------------
/----------------------------------------------

NULL POINTER:

* nullptr was added to the language with C++11:
	- What is null pointer?
	- When we need to use null pointers?
	- NULL is a macro defined in the libraries like as <stdlib>, <stdio>, <time>, <string> 
	- In our system   --> #define NULL 0 
	  In some systems --> #define NULL ((void*) 0) 

* What is null pointer conversion in C?
	- int *ptr = NULL;
	  int *ptr = 0; 

* The type of implicit pointer conversion:
	- array to pointer conversion (array decay) --> the address of first element 
	  function to pointer conversion --> func() --> &func()
	  NULL pointer conversion --> int *ptr = 0; --> int *ptr = NULL;

* nullptr --> is an address constant to eliminate the disadvantages of using 0 to represent null 
		  --> data type is nullptr_t (in <cstddef> lib)
			  void func(nullptr_t) --> especially used for function overloading 
		  --> nullptr is only assigned to pointers (not taking consideration of data types)
		  --> nullptr doesnt point any objects, and it can not be dereferenced. 

* The following if conditions are same: 
	- if (iptr == nullptr) {} 
	- if (!iptr) {}

* The following if conditions are same: 
	- if (iptr != nullptr) {} 
	- if (iptr) {}

* It is not suggested to use NULL macro in cpp 

#include <stdlib.h>
#include <cstddef>

struct Data {};

int main() {
	
	// int x = nullptr; --> NOT OK in main.cpp 
	// Error : C++ a value of type "std::nullptr_t" cannot be used to initialize an entity of type "int"
	
	int* iptr = nullptr;
	double* dptr = nullptr;
	Data* sptr = nullptr; 

	bool flag;
	flag = 0;
	flag = NULL;
	flag = nullptr;
}

/----------------------------------------------	
/----------------------------------------------

* The usage of null pointer: 
	- Adres döndüren fonksiyonlarda, baþarýsýzlýk deðeri olarak --> return nullptr; 
	  T* func(){...}

	- Bazý fonksiyonlarda arama iþlemi için kullanýlabilir.
	  Aranan deðer bulunursa   --> bulunan deðerin adresi
	  Aranan deðer bulunamazsa --> nullptr deðeri döndürülür.
	
	- Parametresi pointer olan fonksiyonlarda yaygýn olarak kullanýlmaktadýr.
	  Ya nesne adresi ya da nullptr argüman olarak bu fonksiyonlara gönderilebilmektedir. 
	  Bu durumda fonksiyon nesne adresi ile çaðrýldýðýnda farklý, nullptr ile çaðrýldýðýnda farklý bir iþ yapacak þekilde tasarlanabilir.
	  void func(T *ptr){...} --> func(nullptr); 
	  fflush(nullptr); --> from standard lib. 

	- Pointer deðiþkenlerin flag olarak kullanýlmasý yaygýndýr. 
	/----------------------------------------------
	int *ptr = nullptr;
	if(expr){
		ptr = nesne adresi; 
	}
	if(ptr == nullptr) {...}
	/----------------------------------------------

	- Dangling pointer: Gösterdiði nesnenin ömrünün bitmesi ile geçerliliðini kaybeden pointerlardýr.
/----------------------------------------------
#include <iostream>
#include <cstdlib>

int main() {

	size_t n = 10;
	int* ptr = (int*)malloc(n* sizeof(int));
	// malloc() --> its return value can be nullptr 

	free(ptr);     // ptr --> a dangling pointer --> invalid pointer
	ptr = nullptr; // ptr --> is not a dangling pointer
}

/----------------------------------------------	
/----------------------------------------------
