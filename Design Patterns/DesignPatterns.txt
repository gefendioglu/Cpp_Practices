
##DESIGN PATTERNS 

  - Design patterns are guidelines for identifying and solving common design problems in object-oriented programming.
  -	There are 23 fundamental design patterns. These patterns are grouped into three basic categories: creational, behavioral, and structural.
  -	The obvious reason is that they provide bestpractices solutions to common software design problems based on the collected wisdom of many programmers.
  -	The second reason is that design patterns provide a concise vocabulary for discussing design problems and their solutions. 
  -	The wrong design pattern can add unnecessary complexity to an application, and an incorrect or inefficient implementation of a pattern can introduce bugs or compromise performance.
  -	Some work has also been done to identify patterns that should not be used. These “anti-patterns” are common pitfalls or improper practices that lead to inefficient, ineffective, difficult-to-understand, or difficult-to-maintain code.
  -	It’s more common that you use patterns as a way to communicate design concepts with the interviewer than that you’re asked to implement a specific design pattern.

##Creational Design Patterns

  -	Creational patterns are focused towards how to instantiate an object or group of related objects.
  -	Creational design patterns are design patterns that deal with object creation mechanisms. 
  -	The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.
  - Types of Creational Design Patterns: 
    - Simple Factory
	- Factory Method
	- Abstract Factory
	- Builder
	- Prototype
	- Singleton

##Structural Design Patterns

  -	Structural patterns are mostly concerned with object composition or in other words how the entities can use each other.
  -	structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.
  - Types of Structural Design Patterns: 
    - Adapter
	- Bridge
	- Composite
	- Decorator
	- Facade
	- Flyweight
	- Proxy

##Behavioral Design Patterns

  - Behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.
  - Types of Structural Design Patterns: 
    - Chain of Responsibility
	- Command
	- Iterator
	- Mediator
	- Memento
	- Observer
	- Visitor
	- Strategy
	- State
	- Template Method

/----------------------------------------------
/----------------------------------------------
##Builder Desing Patterns:

  - Instead of constructing an object directly, you instantiate a builder and let it create the object on your behalf.
  -	Builders are particularly useful for initializing objects that require multiple constructor parameters, especially parameters of the same or similar types.
  - Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.
  - Allows you to aviod telescoping constructor anti-pattern:
	Window(int size, bool cheese = true, bool pepperoni = true, bool tomato = false, bool lettuce = true){}
  - What is its difference from factory design pattern?
	- The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.
/----------------------------------------------
/----------------------------------------------

- **Example**: Before applying Builder Desing Pattern

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Window {
public:
	Window(bool visible, bool modal, bool dialog) {
		this->visible = visible;
		this->modal = modal;
		this->dialog = dialog;
	}
private:
	bool visible;
	bool modal;
	bool dialog;
	// rest of class omitted
};

int main()
{
	Window* w = new Window(false, true, true);
}


/----------------------------------------------
/----------------------------------------------

- **Example**: After applying Builder Desing Pattern

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Window {
public:
	Window(bool visible, bool modal, bool dialog) {
		this->visible = visible;
		this->modal = modal;
		this->dialog = dialog;
	}
private:
	bool visible;
	bool modal;
	bool dialog;
	// rest of class omitted
};

class WindowBuilder {
public:
	WindowBuilder() {}

	WindowBuilder setDialog(bool flag) {
		dialog = flag;
		return *this;
	}

	WindowBuilder setModal(bool flag) {
		modal = flag;
		return *this;
	}

	WindowBuilder setVisible(bool flag) {
		visible = flag;
		return *this;
	}

	Window build() {
		return *new Window(visible, modal, dialog);
	}

private:
	bool dialog;
	bool modal;
	bool visible;
};

int main()
{
	Window* w = new Window(false, true, true);   // without builder
	WindowBuilder* window = new WindowBuilder(); // with builder
	Window wbuilder = window->setVisible(false).setModal(true).setDialog(true).build();
		
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Burger Example with builder design pattern

class Burger{
public:
	Burger(bool cheese, bool pepperoni, bool lettuce, bool tomato) {
		this->cheese = cheese;
		this->pepperoni = pepperoni;
		this->lettuce = lettuce;
		this->tomato = tomato;
	}

private:
	bool cheese = false;
	bool pepperoni = false;
	bool lettuce = false;
	bool tomato = false;
};

class BurgerBuilder{
public:
	BurgerBuilder(int size)
	{
		this->size = size;
	}

	BurgerBuilder addPepperoni(bool flag)
	{
		this->pepperoni = flag;
		return *this;
	}

	BurgerBuilder addLettuce(bool flag)
	{
		this->lettuce = flag;
		return *this;
	}

	BurgerBuilder addCheese(bool flag)
	{
		this->cheese = flag;
		return *this;
	}

	BurgerBuilder addTomato(bool flag)
	{
		this->tomato = flag;
		return *this;
	}

	Burger build()
	{
		return *new Burger(cheese, pepperoni, lettuce, tomato);
	}

private:
	int size;
	bool cheese = false;
	bool pepperoni = false;
	bool lettuce = false;
	bool tomato = false;
};


int main()
{
	/*BurgerBuilder* burger = new BurgerBuilder(14);
	Burger bbuilder = burger->addPepperoni(true).addLettuce(false).addTomato(false).build();*/

	Burger bbuilder = (new BurgerBuilder(14))->addPepperoni(true).addLettuce(false).addTomato(false).build();
}

/----------------------------------------------
/----------------------------------------------

