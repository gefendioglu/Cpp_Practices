
## Builder Desing Patterns:

  - The Builder pattern creates objects in a stepwise manner without knowing or caring how those objects are constructed. 
  -	Instead of constructing an object directly, you instantiate a builder and let it create the object on your behalf.
  -	Builders are particularly useful for initializing objects that require multiple constructor parameters, especially parameters of the same or similar types.
  -	Specific parameters can be made mandatory, in which case an error or exception would occur if they were missing and others can be made optional with default values
  -	Use builders when objects are complex to construct and/or are constructed in several steps. 
  - Instead of constructing an object directly, you instantiate a builder and let it create the object on your behalf.
  -	Builders are particularly useful for initializing objects that require multiple constructor parameters, especially parameters of the same or similar types.
  - Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.
  - Allows you to aviod telescoping constructor anti-pattern:
	Window(int size, bool cheese = true, bool pepperoni = true, bool tomato = false, bool lettuce = true){}
  - What is its difference from factory design pattern?
	- The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.

/----------------------------------------------
/----------------------------------------------

- **Example**: Before applying Builder Desing Pattern

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Window {
public:
	Window(bool visible, bool modal, bool dialog) {
		this->visible = visible;
		this->modal = modal;
		this->dialog = dialog;
	}
private:
	bool visible;
	bool modal;
	bool dialog;
	// rest of class omitted
};

int main()
{
	Window* w = new Window(false, true, true);
}


/----------------------------------------------
/----------------------------------------------

- **Example**: After applying Builder Desing Pattern

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Window {
public:
	Window(bool visible, bool modal, bool dialog) {
		this->visible = visible;
		this->modal = modal;
		this->dialog = dialog;
	}
private:
	bool visible;
	bool modal;
	bool dialog;
	// rest of class omitted
};

class WindowBuilder {
public:
	WindowBuilder() {}

	WindowBuilder setDialog(bool flag) {
		dialog = flag;
		return *this;
	}

	WindowBuilder setModal(bool flag) {
		modal = flag;
		return *this;
	}

	WindowBuilder setVisible(bool flag) {
		visible = flag;
		return *this;
	}

	Window build() {
		return *new Window(visible, modal, dialog);
	}

private:
	bool dialog;
	bool modal;
	bool visible;
};

int main()
{
	Window* w = new Window(false, true, true);   // without builder
	WindowBuilder* window = new WindowBuilder(); // with builder
	Window wbuilder = window->setVisible(false).setModal(true).setDialog(true).build();
		
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Burger Example with builder design pattern

class Burger{
public:
	Burger(bool cheese, bool pepperoni, bool lettuce, bool tomato) {
		this->cheese = cheese;
		this->pepperoni = pepperoni;
		this->lettuce = lettuce;
		this->tomato = tomato;
	}

private:
	bool cheese = false;
	bool pepperoni = false;
	bool lettuce = false;
	bool tomato = false;
};

class BurgerBuilder{
public:
	BurgerBuilder(int size)
	{
		this->size = size;
	}

	BurgerBuilder addPepperoni(bool flag)
	{
		this->pepperoni = flag;
		return *this;
	}

	BurgerBuilder addLettuce(bool flag)
	{
		this->lettuce = flag;
		return *this;
	}

	BurgerBuilder addCheese(bool flag)
	{
		this->cheese = flag;
		return *this;
	}

	BurgerBuilder addTomato(bool flag)
	{
		this->tomato = flag;
		return *this;
	}

	Burger build()
	{
		return *new Burger(cheese, pepperoni, lettuce, tomato);
	}

private:
	int size;
	bool cheese = false;
	bool pepperoni = false;
	bool lettuce = false;
	bool tomato = false;
};


int main()
{
	/*BurgerBuilder* burger = new BurgerBuilder(14);
	Burger bbuilder = burger->addPepperoni(true).addLettuce(false).addTomato(false).build();*/

	Burger bbuilder = (new BurgerBuilder(14))->addPepperoni(true).addLettuce(false).addTomato(false).build();
}

/----------------------------------------------
/----------------------------------------------

- **Example**:  Builder Design Pattern – Fluent API

// Person.h
/----------------------------------------------

#pragma once
#include <iostream>

class PersonBuilder;

class Person{
 public:
    friend class PersonBuilder;
    friend std::ostream& operator<<(std::ostream& os, const Person& obj);
    static PersonBuilder create(std::string name);

private:
    std::string m_name, m_street_address, m_post_code, m_city;  // Personal Detail
    std::string m_company_name, m_position, m_annual_income;    // Employment Detail
    Person(std::string name) : m_name(name) {}
};

// Person_Builder.h
/----------------------------------------------

#pragma once
#include "Person.h"

class PersonBuilder{
  
public:
    PersonBuilder(std::string name) : person(name) {}
    operator Person() const { return std::move(person); }
    
    PersonBuilder& lives();
    PersonBuilder& at(std::string street_address);
    PersonBuilder& with_postcode(std::string post_code);
    PersonBuilder& in(std::string city);
    PersonBuilder& works();
    PersonBuilder& with(std::string company_name);
    PersonBuilder& as_a(std::string position);
    PersonBuilder& earning(std::string annual_income);

private:
    Person person;
};

// Person.cpp
/----------------------------------------------

#include <iostream>
#include "Person.h"
#include "Person_Builder.h"

PersonBuilder Person::create(std::string name) { return PersonBuilder{ name }; }
std::ostream& operator<<(std::ostream& os, const Person& obj)
{
    return os << obj.m_name
        << std::endl
        << "lives : " << std::endl
        << "at " << obj.m_street_address
        << " with postcode " << obj.m_post_code
        << " in " << obj.m_city
        << std::endl
        << "works : " << std::endl
        << "with " << obj.m_company_name
        << " as a " << obj.m_position
        << " earning " << obj.m_annual_income;
}

// Person_Builder.cpp
/----------------------------------------------

#include "Person_Builder.h"

PersonBuilder& PersonBuilder::lives() { return *this; }
PersonBuilder& PersonBuilder::works() { return *this; }

PersonBuilder& PersonBuilder::with(std::string company_name) {
    person.m_company_name = company_name;
    return *this;
}

PersonBuilder& PersonBuilder::as_a(std::string position) {
    person.m_position = position;
    return *this;
}

PersonBuilder& PersonBuilder::earning(std::string annual_income) {
    person.m_annual_income = annual_income;
    return *this;
}

PersonBuilder& PersonBuilder::at(std::string street_address) {
    person.m_street_address = street_address;
    return *this;
}

PersonBuilder& PersonBuilder::with_postcode(std::string post_code) {
    person.m_post_code = post_code;
    return *this;
}

PersonBuilder& PersonBuilder::in(std::string city) {
    person.m_city = city;
    return *this;
}

// main.cpp
/----------------------------------------------

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "Person.h"
#include "Person_Builder.h"

int main()
{
    Person p = Person::create("John")
                .lives()
                .at("123 London Road")
                .with_postcode("SW1 1GB")
                .in("London")
                .works()
                .with("PragmaSoft")
                .as_a("Consultant")
                .earning("1000000");

    std::cout << p << "\n";

    return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------