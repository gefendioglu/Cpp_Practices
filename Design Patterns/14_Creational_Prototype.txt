
## Prototype Desing Patterns (Clone Pattern)

- Creating object based on an existing object through cloning.

- Adding and removing products at run-time and specifying new objects by varying values 

- It allows you to create a copy of an existing object and modify it to your needs. 

- The prototype is quite simply a partially or fully initialized object that you make a copy of. 

- Prototype Design Pattern is an obvious choice while you are working with the Command Design Pattern. For example, in HTTP request most of the time header & footer content remains the same, what changes are data. In such a scenario, you should not create an object from scratch.

/----------------------------------------------
/----------------------------------------------

- **Example**: Before applying Prototype Design Pattern Solution

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Office {
public:
    Office(std::string street, std::string city, int32_t cubical)
        :m_street{ street }, m_city{ city }, m_cubical{ cubical } {}
private:
    std::string m_street;
    std::string m_city;
    int32_t m_cubical;
};

class Employee {
public:
    Employee(std::string name, Office office) :m_name{ name }, m_office{ office } {}
private:
    std::string m_name;
    Office m_office;
};

int main() {

    Employee john{ "John Doe", Office{"123 East Dr", "London", 123} };
    Employee jane{ "Jane Doe", Office{"123 East Dr", "London", 124} };
    Employee jack{ "jack Doe", Office{"123 ORR", "Bangaluru", 300} };

    return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------

- **Example**: After applying Prototype Design Pattern Solution

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Office {
public:
    Office(std::string street, std::string city, int32_t cubical)
        :m_street(street), m_city(city), m_cubical(cubical) {}

private:
    std::string m_street;
    std::string m_city;
    int32_t m_cubical;
};

class Employee {
public:
    Employee(std::string name, Office office) :m_name(name), m_office(office) {}

private:
    std::string m_name;
    Office m_office;
};

static Office LondonOffice{ "123 East Dr", "London", 123 };
static Office BangaluruOffice{ "RMZ Ecoworld ORR", "London", 123 };

int main() {

    Employee john{ "John Doe", LondonOffice };
    Employee jane{ "Jane Doe", LondonOffice };
    Employee jack{ "jack Doe", BangaluruOffice };

    return EXIT_SUCCESS;
}


/----------------------------------------------
/----------------------------------------------

### Prototype - Factory Design Pattern

- **Example**: Prototype Factory Design Pattern Solution for the same problem 

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

struct Office {
    std::string m_street;
    std::string  m_city;
    int32_t m_cubical;
};

class Employee {
public:
    // Copy constructor
    Employee(const Employee& employee) : m_name{ employee.m_name }, m_office{ new Office{*employee.m_office} }
    { }

    // Copy assignment
    Employee& operator=(const Employee& rhs) {
        if (this == &rhs) 
            return *this;
        m_name = rhs.m_name;
        m_office = new Office{ *rhs.m_office };
        return *this;
    }

    friend std::ostream& operator<<(std::ostream& os, const Employee& employee) {
        return os << employee.m_name
            << " works at " << employee.m_office->m_street
            << " " << employee.m_office->m_city
            << " seats @" << employee.m_office->m_cubical;
    }
    friend class EmployeeFactory;

private:
    std::string m_name;
    Office* m_office;

    // Private constructor
    // Direct instance can not be created except for "class EmployeeFactory"
    Employee(std::string name, Office* office) : m_name{ name }, m_office{ office } {}
};

// Implementation of Factory Design Pattern
class EmployeeFactory {
public:
    static std::unique_ptr<Employee> NewMainOfficeEmployee(std::string name, int32_t cubical) {
        return NewEmployee(name, cubical, main);
    }
    static std::unique_ptr<Employee> NewAuxOfficeEmployee(std::string name, int32_t cubical) {
        return NewEmployee(name, cubical, aux);
    }

private:
    static Employee main;
    static Employee aux;

    static std::unique_ptr<Employee> NewEmployee(std::string name, int32_t cubical, Employee& proto) {
        auto employee = std::make_unique<Employee>(proto);
        employee->m_name = name;
        employee->m_office->m_cubical = cubical;
        return employee;
    }
};

// Static Member Initialization 
Employee EmployeeFactory::main{ "", new Office{"123 East Dr", "London", 123} };
Employee EmployeeFactory::aux{ "", new Office{"RMZ Ecoworld ORR", "London", 123} };

int main() {

    auto jane = EmployeeFactory::NewMainOfficeEmployee("Jane Doe", 125);
    auto jack = EmployeeFactory::NewAuxOfficeEmployee("Jack Doe", 123);   
    std::cout << *jane << "\n" << *jack << "\n";

    return EXIT_SUCCESS;

    /*
        Jane Doe works at 123 East Dr London seats @125
        Jack Doe works at RMZ Ecoworld ORR London seats @123
    */
}

/----------------------------------------------
/----------------------------------------------

### Prototype Design Pattern to Implement Virtual Copy Constructor

- The problem about not have virtual ctor in C++.
- С++ doesn’t support virtual ctor & virtual copy ctor.
- C++ has the support of polymorphic object destruction using it’s base class’s virtual destruction.

- **Example**: The problem about that there is no virtual ctor & virtual copy definitions in C++

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class animal {
public:
    // virtual destructor
    virtual ~animal() { 
        std::cout << "animal::~animal()\n"; 
    }
};

class dog : public animal {
public:
    ~dog() { 
        std::cout << "dog::~dog()\n"; 
    }
};

class cat : public animal {
public:
    ~cat() { 
        std::cout << "cat::~cat()\n"; 
    }
};

void create_animal(animal* animal) {
    // How to create the object of same type pointed by animal ?
    // How to copy the object of same type pointed by animal?
    // the created object pointed by animal class is deleted by using virtual destructor
    delete animal; 
}

int main() {

    animal* animal_dog = new dog();
    animal* animal_cat = new cat();

    create_animal(animal_dog);
    create_animal(animal_cat);

    /*
        dog::~dog()
        animal::~animal()
        cat::~cat()
        animal::~animal()
    */

    return 0;
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Prototype Design Pattern Sample

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 
#include<memory> 

// pure virtual functions - abstract class
class animal {
public:
    virtual ~animal() = default;
    virtual std::unique_ptr<animal> create() = 0;
    virtual std::unique_ptr<animal> clone() = 0;
 };

class dog :public animal {
public:
    std::unique_ptr<animal> create() override { 
        std::cout << "creating dog object" << "\n";
        return std::make_unique<dog>(); 
    }

    std::unique_ptr<animal> clone() override {
        std::cout << "cloning dog object" << "\n";
        return std::make_unique<dog>(*this); 
    }
};

class cat : public animal {
public:
    std::unique_ptr<animal> create() {
        std::cout << "creating cat object" << "\n";
        return std::make_unique<cat>(); 
    }

    std::unique_ptr<animal> clone() { 
        std::cout << "cloning cat object" << "\n";
        return std::make_unique<cat>(*this); 
    }
};

void create_animal(animal* animal) { 
    auto new_animal = animal->create();
    auto clone_animal = animal->clone();
    delete animal;
}

int main() {

    // Derived (dog) --> Base (animal) - upcasting
    animal* animal_dog = new dog();

    // Derived (cat) --> Base (animal) - upcasting
    animal* animal_cat = new cat();
    
    create_animal(animal_dog);
    create_animal(animal_cat);

    /*
        creating dog object
        cloning dog object
        creating cat object
        cloning cat object
    */

    return 0;
}

/----------------------------------------------
/----------------------------------------------



