
## FACADE DESIGN PATTERN

- Facade Pattern is used to provide a unified interface to a complex system. This pattern defines a higher-level interface that makes the subsystem easier to use by wrapping a complicated subsystem.

- Facade Pattern improves the readability & usability of a software library. 

- A typical application of Facade Pattern is console / terminal / command-prompt you find in Linux or Windows is a unified way to access machine functionality provided by OS.

- Adapter pattern wraps one class, while Facade pattern may represent many classes. 

- **Has-a relationship** is used instead of using is-a relationship

- Facade pattern is appropriate:
  - when you have a complex system that you want to expose to clients in a simplified way, 
  - when you want to make an external communication layer over an existing system which is incompatible with the system.

/----------------------------------------------
/----------------------------------------------

- **Example**:  Facade Design Pattern 

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Alarm {
public:
	void alarm_on() {
		std::cout << "Alarm is on and house is secured" << "\n";
	}
	void alarm_off() {
		std::cout << "Alarm is off and you can go into the house" << "\n";
	}
};

class Ac {
public:
	void ac_on() {
		std::cout << "Ac is on" << "\n";
	}
	void ac_off() {
		std::cout << "AC is off" << "\n";
	}
};

class Tv {
public:
	void tv_on() {
		std::cout << "Tv is on" << "\n";
	}
	void tv_off() {
		std::cout << "TV is off" << "\n";
	}
};

class HouseFacade {
public:
	void go_to_work() {
		m_ac.ac_off();
		m_tv.tv_off();
		m_alarm.alarm_on();
	}
	void come_home() {
		m_alarm.alarm_off();
		m_ac.ac_on();
		m_tv.tv_on();
	}
private:
	Alarm   m_alarm;
	Ac      m_ac;
	Tv      m_tv;
};

int main() {

	HouseFacade hf;
	// only have 2 functions are called 
	// rather than calling several on-off functions
	hf.go_to_work();
	hf.come_home();

	/*
		AC is off
		TV is off
		Alarm is on and house is secured
		Alarm is off and you can go into the house
		Ac is on
		Tv is on
	*/
	return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------