
## Abstract Factory Design Pattern 

- Why Abstract Factory Design Pattern is needed to use?
  - C++ has the support of polymorphic object destruction using it’s base class’s virtual destructor. However, equivalent support for creation & copying of objects does not exist in C++ virtual constructor & virtual copy constructors.

- This design pattern is applied by delegating the act of creation & copying the object to the derived class through the use of pure virtual functions (polymorphic functions).

- Liskov’s Substitution Principle(LSP) is applied with the use of Abstract Factory design pattern.

/----------------------------------------------
/----------------------------------------------

- **Example**: The Problem
  
#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

class Member {
public:
    virtual ~Member() {
        std::cout << "Member::~Member()\n";
    }
};

class Member2D :public Member {
public:
    ~Member2D() {
        std::cout << "Member::~Member2D()\n";
    }
};

class Member3D : public Member {
public:
    ~Member3D() {
        std::cout << "Member::~Member3D()\n";
    }
};

void create_Member() {
    // Not sure which object class would be passed here ("Member2D" or "Member3D")
    // Member3D* ptr3d = new Member3D();
    // Member2D* ptr2d = new Member2D();
    Member* Member = new Member();
    delete Member;
}

int main() {

    create_Member();

    return EXIT_SUCCESS;
    /*
        Member::~Member()
    */
}

/----------------------------------------------
/----------------------------------------------

- **Example**: Abstract Factory Design Pattern (CREATIONAL_ABSTRACT_FACTORY)

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 
#include<memory>

class Member {
public:
    Member(int x, int y) : m_x(x), m_y(y) {}
    virtual ~Member() = default;

    // Like virtual constructor
    virtual std::unique_ptr<Member> create() = 0;

    // Like virtual copy constructor
    virtual std::unique_ptr<Member> clone() = 0;

    friend std::ostream& operator<<(std::ostream& os, const Member& obj) {
        return os << "x: " << obj.m_x << " y: " << obj.m_y;
    }

private:
    int   m_x;
    int   m_y;
};

class Member2D : public Member {
public:
    std::unique_ptr<Member> create() { 
        // Derived --> Base (upcasting)
        // Member2D --> Member
        return std::make_unique<Member2D>(); 
    }

    std::unique_ptr<Member> clone() { 
        return std::make_unique<Member2D>(*this); 
    }
};

class Member3D : public Member {
public:
    // Derived --> Base (upcasting)
    // Member3D --> Member
    std::unique_ptr<Member> create() { 
        return std::make_unique<Member3D>(); 
    }

    std::unique_ptr<Member> clone() { 
        return std::make_unique<Member3D>(*this); 
    }
};

void Member_func(Member* Member) {
    
    // "create" the object of same type i.e. Membered by who ?
    auto new_Member = Member->create(); 

    // "copy" the object of same type i.e. Membered by who ?
    auto duplicate_Member = Member->clone();    
    delete Member;
}

int main() {

    // TO BE IMPLEMENTED !!!
    return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------


## Functional Factory Design Pattern 

- If it is not necessary to use polymorphic functionality for example in a time-constrained application like an embedded system, functional & lambda functions can be used together to apply factory design pattern.

/----------------------------------------------
/----------------------------------------------

- **Example**: Functional Approach to Factory Design Pattern using Modern C++ (CREATIONAL_FUNCTIONAL_FACTORY)

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 
#include<memory>
#include<map>
#include<functional>

enum class MemberType { Member2D, Member3D };

class Member {
public:
    Member() = default;
    Member(int x, int y) : m_x{ x }, m_y{ y } {}
    virtual ~Member() = default;

    friend std::ostream& operator<<(std::ostream& os, const Member& obj) {
        return os << "x: " << obj.m_x << " y: " << obj.m_y;
    }
private:
    int m_x;
    int m_y;
};

class Member2D : public Member {/* . . . */ };
class Member3D : public Member {/* . . . */ };

class MemberFunctionalFactory {
public:
    MemberFunctionalFactory() {
        m_factories[MemberType::Member2D] = [] { 
            return std::make_unique<Member2D>(); 
        };
        m_factories[MemberType::Member3D] = [] { 
            return std::make_unique<Member3D>(); 
        };
    }
    std::unique_ptr<Member> create(MemberType type) { 
        return m_factories[type](); 
    }
private:
    std::map<MemberType, std::function<std::unique_ptr<Member>() >> m_factories;
};

int main() {

    MemberFunctionalFactory pf;
    auto Member2D = pf.create(MemberType::Member2D);
    std::cout << Member2D << "\n"; // The address of Member2D
    
    return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------


