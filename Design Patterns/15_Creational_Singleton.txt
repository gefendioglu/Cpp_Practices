
## Singleton Design Pattern

- The Singleton pattern ensures that at most one instance of a class exists at any given time. This instance can be accessed from global space. 

- An application cannot create new instances—all methods are accessed through the singleton. The application obtains the singleton by invoking a “static function” exposed by the class.

- Singletons are also sometimes used as a substitute for global variables. Many people consider using singletons to store global data as an anti-pattern.

- Examples of where only a single instance of a class should exist, including caches, thread pools, and registries.

- Why is a singleton better than a set of static funcions?
  - Inheritance and interfaces: Singletons are objects. They can inherit from base classes and implement interfaces.
  - Possible multiplicity: You can change your mind and create multiple objects (especially for multi-threading applications) without changing a lot of code.
  - Dynamic binding: The actual class used to create the singleton can be determined at run time, not at compile time.

- The disadvantages of implementing singleton design pattern? 
  - A singleton may slow the application’s startup time as it initializes
  - It may hold onto resources longer than necessary, because normally a singleton isn’t destroyed until the application ends.
  - It introduces a global state in your application and change it in one place could affect in other areas and it could become difficult to debug.
  - The other bad thing is it makes your code tightly coupled plus mocking the singleton could be difficult.

- How to implement singleton design pattern? 
  - The easiest way to do this is to **make the constructor private** and **initialize the single instance within the class**.
  - Making the constructor **private** to the class, we intend to define as a singleton. In this case, only the members of the class can access the private constructor.
  - It’s possible to subclass a singleton by making the constructor **protected** instead of **private**. This might be suitable under some circumstances.
    - One approach is to create a **register of singletons** of the subclasses and the **getInstance** function can take in a parameter or use an environment variable to return the desired singleton. The registry can maintain a mapping of string names to singleton objects, which can be accessed as needed.
 
- To create a singleton:
  - make the constructor private
  - disable cloning (deleting copy ctor & copy assignment)
  - create a static instance 
 
- It’s not necessary for the instance to be created when the class is loaded, it just needs to be created before it’s needed.
  - In that case, getInstance() member function should initialize the instance before returning it, if it hasn’t yet been initialized
  - This technique is known as deferred initialization (lazy initialization or lazy loading).

// ----------------------------------------------------
// ----------------------------------------------------

- **Example** : Singleton Desing Pattern with returning pointer and reference

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 
#include<chrono> 

// Return a singleton as a pointer
// ----------------------------------------------------
// ----------------------------------------------------

class President {
public:

	static President* getInstance()	{
		if (!instance)
			instance = new President();
		return instance;
	}

	// deleted copy constructor
	President(President const& president) = delete;

	// deleted copy assignment
	President& operator=(President const& president) = delete;

	// getter - setter functions
	int getData()const { return this->data; }
	void setData(const int& data) { this->data = data; }

private:
	static President* instance;
	int data;
	President() : data{ 0 } {	} // private ctor
};

//Initialize pointer to zero so that it can be initialized in first call to getInstance
President* President::instance = 0;

// Return a singleton as a reference (lazy initialization)
// ----------------------------------------------------
// ----------------------------------------------------

class Ceo {
public:
	static Ceo& getInstance() {
		static Ceo instance;
		return instance;
	}

	int getData()const { return this->data; }
	void setData(const int& data) { this->data = data; }

private:
	int data;
	Ceo() {}						// private ctor 
	Ceo(Ceo const& ceo);			// copy constructor
	Ceo& operator=(Ceo const& ceo); // copy assignment

};

int main() {

	President* president = president->getInstance();
	std::cout << president->getData() << "\n"; // 0 
	president->setData(100);
	std::cout << president->getData() << "\n"; // 100


	Ceo &ceo = ceo.getInstance();
	std::cout << ceo.getData() << "\n"; // 0 
	ceo.setData(200);
	std::cout << ceo.getData() << "\n"; // 200

	return 0;
}


/----------------------------------------------
/----------------------------------------------

- **Example** : Singleton Pattern (with different return values)
  - Using a logging class to write debugging messages to the console. 
  - How would you implement this logging facility using the Singleton pattern?

#define _CRT_SECURE_NO_WARNINGS
#include<iostream> 

//singleton.h
/*-----------------------------------------------------*/
class SingletonPtr {
public:
	// return value is a pointer
	static SingletonPtr* getInstance();
	SingletonPtr(const SingletonPtr& ref) = delete;
	SingletonPtr& operator=(const SingletonPtr& ref) = delete;
	int getter() const{ 
		return mx; 
	}
	void setter(const int x) {
		this->mx = x;
	}
private:
	static SingletonPtr* mptr;
	int mx;
	SingletonPtr() = default; // preventing to be accessed by other classes
};

class SingletonRef {
public:
	// return value is a reference
	static SingletonRef& getInstance() {
		static SingletonRef sref; 
		return sref;
	}
	SingletonRef(const SingletonRef& ref) = delete;
	SingletonRef& operator=(const SingletonRef& ref) = delete;
	int getter() const {
		return mx;
	}
	void setter(const int x) {
		this->mx = x;
	}
private:
	int mx;
	SingletonRef() = default;
};

//singleton.cpp
/*-----------------------------------------------------*/
SingletonPtr* SingletonPtr::mptr = nullptr;
// the same imp. --> Singleton Singleton::*mptr = nullptr;

SingletonPtr* SingletonPtr::getInstance() {
	if (!mptr)
		mptr = new SingletonPtr();
	return mptr;
}

int main() {

	//Singleton obj; // --> not possible to create instance directly 
	auto objPtr = SingletonPtr::getInstance();
	objPtr->setter(10);
	std::cout << "objPtr->mx : " << objPtr->getter() << "\n";
		
	auto& objRef = SingletonRef::getInstance();
	objRef.setter(20);
	std::cout << "objRef.mx  : " << objRef.getter() << "\n";

	/*
		objPtr->mx : 10
		objRef.mx  : 20
	*/

	return EXIT_SUCCESS;
}

/----------------------------------------------
/----------------------------------------------

